{"ast":null,"code":"import apiCall from './api-call';\nexport async function checkDbConnection() {\n  const operation = 'checkDbConnection';\n  const query = `query ${operation} {${operation} {Connected, Message}}`;\n  return await apiCall(operation, query).then(res => {\n    return res;\n  }, err => {\n    return err;\n  });\n}\n;\nexport async function getAllActiveItems(daysBack, markets) {\n  if ('number' !== typeof daysBack) daysBack = parseInt(daysBack);\n  const operation = 'getAllActiveItems';\n  const query = `query ${operation}($daysBack: Int!, $markets: [String]!) {${operation}(daysBack: $daysBack, markets: $markets) {ItemCode, Country}}`;\n  const variables = {\n    daysBack,\n    markets\n  };\n  return await apiCall(operation, query, variables).then(res => {\n    return res;\n  }, err => {\n    return err;\n  });\n}\n;\nexport async function getAllErpItems(itemCodes, markets, environment) {\n  const operation = 'getAllErpItems';\n  const query = `query ${operation}($itemCodes: [ItemObject]!, $markets: [String]!, $environment: String) {${operation}(itemCodes: $itemCodes, markets: $markets, environment: $environment) {ItemCode Country Error}}`;\n  const variables = {\n    itemCodes,\n    markets,\n    environment\n  };\n  return await apiCall(operation, query, variables).then(res => {\n    return res;\n  }, err => {\n    return err;\n  });\n}\nexport async function getAllFailedProcesses() {\n  const operation = 'getAllProcessingErrors';\n  const query = `query ${operation} {${operation} {Id, Name, ProcessJobId, Category, ExternalSystem, DataDirection}}`;\n  const jobs = {};\n  return await apiCall(operation, query).then(res => {\n    var _res$data;\n    const results = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.getAllProcessingErrors;\n    const errors = res === null || res === void 0 ? void 0 : res.errors;\n    if (results) {\n      var _res$data2;\n      const allErrors = (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.getAllProcessingErrors;\n      if (allErrors) {\n        allErrors.forEach(error => {\n          if (!jobs[error.ProcessJobId]) {\n            jobs[error.ProcessJobId] = {\n              Name: error.Name,\n              Count: 1,\n              Direction: error.DataDirection,\n              ExternalSystem: error.ExternalSystem,\n              Categories: [error.Category]\n            };\n          } else {\n            let count = jobs[error.ProcessJobId].Count;\n            jobs[error.ProcessJobId].Count = count + 1;\n            if (!jobs[error.ProcessJobId].Categories.includes(error.Category)) jobs[error.ProcessJobId].Categories.push(error.Category);\n          }\n        });\n      }\n      return jobs;\n    } else if (errors) {\n      if (Array.isArray(errors)) {\n        errors.forEach((error, idx) => {\n          jobs.errors = {\n            [idx]: error.message\n          };\n        });\n      } else {\n        jobs.errors = errors.message;\n      }\n      return jobs;\n    }\n  }, err => {\n    return err;\n  });\n}\nexport async function getAllFailedPaymentsSummary() {\n  const operation = 'getAllFailedPayments';\n  const query = `query ${operation} {${operation} {PaymentId, OrderNumber, PaymentType, PaymentAmount, PaymentDate, CardNumber, AttemptedAt, ErrorReason, CurrencyCode}}`;\n  const failedPayments = {};\n  return await apiCall(operation, query).then(res => {\n    var _res$data3;\n    const results = res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.getAllFailedPayments;\n    const errors = res === null || res === void 0 ? void 0 : res.errors;\n    if (results && results.length > 0) {\n      results.forEach(result => {\n        if (!failedPayments[result.PaymentType]) {\n          failedPayments[result.PaymentType] = {\n            Type: result.PaymentType,\n            Count: 1,\n            AggregateAmount: result.PaymentAmount,\n            CurrencyCode: result.CurrencyCode,\n            ErrorReasons: [result.ErrorReason]\n          };\n        } else {\n          const failedPayment = failedPayments[result.PaymentType];\n          let count = failedPayment.Count;\n          let aggregateAmount = failedPayment.AggregateAmount;\n          failedPayment.Count = count + 1;\n          failedPayment.AggregateAmount = aggregateAmount + result.PaymentAmount;\n          if (!failedPayment.ErrorReasons.includes(result.ErrorReason)) failedPayment.ErrorReasons += `;\\n${result.ErrorReason}`;\n        }\n      });\n      return failedPayments;\n    } else if (errors) {\n      return errors;\n    }\n  }, err => {\n    return err;\n  });\n}","map":{"version":3,"names":["apiCall","checkDbConnection","operation","query","then","res","err","getAllActiveItems","daysBack","markets","parseInt","variables","getAllErpItems","itemCodes","environment","getAllFailedProcesses","jobs","_res$data","results","data","getAllProcessingErrors","errors","_res$data2","allErrors","forEach","error","ProcessJobId","Name","Count","Direction","DataDirection","ExternalSystem","Categories","Category","count","includes","push","Array","isArray","idx","message","getAllFailedPaymentsSummary","failedPayments","_res$data3","getAllFailedPayments","length","result","PaymentType","Type","AggregateAmount","PaymentAmount","CurrencyCode","ErrorReasons","ErrorReason","failedPayment","aggregateAmount"],"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/get-dashboard.js"],"sourcesContent":["import apiCall from './api-call';\n\nexport async function checkDbConnection() {\n  const operation = 'checkDbConnection';\n  const query = `query ${operation} {${operation} {Connected, Message}}`;\n  return await apiCall(operation, query).then(\n    res => { return res; },\n    err => { return err; }\n  );\n};\n\nexport async function getAllActiveItems(daysBack, markets) {    \n  if ('number' !== typeof daysBack) daysBack = parseInt(daysBack);\n  const operation = 'getAllActiveItems';\n  const query = `query ${operation}($daysBack: Int!, $markets: [String]!) {${operation}(daysBack: $daysBack, markets: $markets) {ItemCode, Country}}`;\n  const variables = { daysBack, markets };\n  \n  return await apiCall(operation, query, variables).then(\n    res => { return res; },\n    err => { return err; }\n  );\n};\n\nexport async function getAllErpItems(itemCodes, markets, environment) {    \n  const operation = 'getAllErpItems';\n  const query = `query ${operation}($itemCodes: [ItemObject]!, $markets: [String]!, $environment: String) {${operation}(itemCodes: $itemCodes, markets: $markets, environment: $environment) {ItemCode Country Error}}`;\n  const variables = { itemCodes, markets, environment };\n  return await apiCall(operation, query, variables).then(\n    res => { return res; },\n    err => { return err; }\n  );\n}\n\nexport async function getAllFailedProcesses() {\n  const operation = 'getAllProcessingErrors';\n  const query = `query ${operation} {${operation} {Id, Name, ProcessJobId, Category, ExternalSystem, DataDirection}}`;\n  const jobs = {};\n\n  return await apiCall(operation, query).then(\n    res => {\n      const results = res?.data?.getAllProcessingErrors;\n      const errors = res?.errors;\n      \n      if (results) {\n        const allErrors = res.data?.getAllProcessingErrors;\n\n        if (allErrors) {\n          allErrors.forEach(error => {\n            if (!jobs[error.ProcessJobId]) {\n              jobs[error.ProcessJobId] = { \n                Name: error.Name, \n                Count: 1, \n                Direction: error.DataDirection, \n                ExternalSystem: error.ExternalSystem, \n                Categories: [error.Category]\n              };\n            } else {\n              let count = jobs[error.ProcessJobId].Count;\n              jobs[error.ProcessJobId].Count = count + 1;\n              \n              if (!jobs[error.ProcessJobId].Categories.includes(error.Category)) jobs[error.ProcessJobId].Categories.push(error.Category);\n            }\n          });\n        }\n\n        return jobs;\n      } else if (errors) {\n        if (Array.isArray(errors)) {\n          errors.forEach((error, idx) => {\n            jobs.errors = { [idx]: error.message };\n          })\n        } else {\n          jobs.errors = errors.message;\n        }\n\n        return jobs;\n      }\n    },\n    err => { return err }\n  );\n}\n\nexport async function getAllFailedPaymentsSummary() {\n  const operation = 'getAllFailedPayments';\n  const query = `query ${operation} {${operation} {PaymentId, OrderNumber, PaymentType, PaymentAmount, PaymentDate, CardNumber, AttemptedAt, ErrorReason, CurrencyCode}}`;\n  const failedPayments = {};\n\n  return await apiCall(operation, query).then(\n    res => {\n      const results = res?.data?.getAllFailedPayments;\n      const errors = res?.errors;\n\n      if (results && results.length > 0) {\n        results.forEach(result => {\n          if (!failedPayments[result.PaymentType]) {\n            failedPayments[result.PaymentType] = {\n              Type: result.PaymentType,\n              Count: 1,\n              AggregateAmount: result.PaymentAmount,\n              CurrencyCode: result.CurrencyCode,\n              ErrorReasons: [result.ErrorReason]\n            }\n          } else {\n            const failedPayment = failedPayments[result.PaymentType];\n            let count = failedPayment.Count;\n            let aggregateAmount = failedPayment.AggregateAmount;\n\n            failedPayment.Count = count + 1;\n            failedPayment.AggregateAmount = aggregateAmount + result.PaymentAmount;\n            if (!failedPayment.ErrorReasons.includes(result.ErrorReason)) failedPayment.ErrorReasons += `;\\n${result.ErrorReason}`;\n          }\n        });\n        \n        return failedPayments;\n      } else if (errors) {\n        return errors;\n      }\n    },\n    err => { return err; }\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}