{"ast":null,"code":"var _jsxFileName = \"/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/pages/failed-processes/failed-processes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Redirect, useLocation } from 'react-router-dom';\nimport apiCall from '../../hooks/api-call';\nimport Unprocessed from './unprocessed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FailedProcesses = () => {\n  _s();\n\n  var _params$state;\n\n  const [failedProcesses, setFailedProcesses] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const [loggedIn, setloggedIn] = useState(localStorage.getItem('loggedIn') ? parseInt(localStorage.getItem('loggedIn')) : 0);\n  const [loggedInUser, setLoggedInUser] = useState(localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null);\n  const [currentTab, setCurrentTab] = useState(null); // Get the state values passed on the user's clicking of a redirect link.\n\n  const params = useLocation();\n  const job = params ? params === null || params === void 0 ? void 0 : (_params$state = params.state) === null || _params$state === void 0 ? void 0 : _params$state.job : null; // Handle the user choosing another tab on this page.\n\n  const handleClick = callerId => {\n    // setIsLoaded(false);    \n    setCurrentTab(callerId);\n  }; // Get the unprocessed jobs from the DB.\n\n\n  useEffect(() => {\n    let mounted = true;\n\n    if (mounted) {\n      const operation = 'getAllProcessingErrors';\n      const query = `query ${operation} {${operation} {Id Name OrderNumber LineNumber Category ExternalSystem DataDirection At Message Exception AdditionalData}}`;\n      const variables = {};\n      apiCall(operation, query, variables).then(res => {\n        if (res.data) {\n          setFailedProcesses(res.data.getAllProcessingErrors);\n          setError(null);\n          setIsLoaded(true);\n        } else if (res.name) {\n          setError({\n            code: res.name,\n            message: res.message\n          });\n          setIsLoaded(true);\n        }\n      }, err => {\n        setError(err.response.data.errors);\n        setIsLoaded(false);\n      });\n    }\n\n    return () => mounted = false;\n  }, [currentTab]); // Set the loggedIn variable.\n\n  useEffect(() => {\n    let mounted = true;\n\n    if (mounted) {\n      setloggedIn(localStorage.getItem('loggedIn') ? parseInt(localStorage.getItem('loggedIn')) : 0);\n      setLoggedInUser(localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null);\n    }\n\n    return () => mounted = false;\n  }, []);\n  return !loggedIn ?\n  /*#__PURE__*/\n  // <div className=\"signin-error\">You must sign in to access this resource.</div>\n  _jsxDEV(Redirect, {\n    to: {\n      pathname: '/login',\n      state: {\n        action: 'Sign In',\n        message: 'Please sign in.'\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signin-error\",\n    children: error === null || error === void 0 ? void 0 : error.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this) : loggedInUser && (loggedInUser.restrictions.pages === 'None' || !loggedInUser.restrictions.pages.includes('Failed Processes')) ? /*#__PURE__*/_jsxDEV(Unprocessed, {\n    jobs: failedProcesses,\n    error: error,\n    isLoaded: isLoaded,\n    handleClick: handleClick,\n    activeTab: currentTab ? currentTab : job ? job : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"role-denied\",\n    children: [\"Your profile's assigned role of \\\"\", loggedInUser.role, \"\\\" does not allow you to access this page.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n};\n\n_s(FailedProcesses, \"7hTaJlm44SG2u8jYVeSO7fMB6eI=\", false, function () {\n  return [useLocation];\n});\n\n_c = FailedProcesses;\nexport default FailedProcesses;\n\nvar _c;\n\n$RefreshReg$(_c, \"FailedProcesses\");","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/pages/failed-processes/failed-processes.js"],"names":["React","useState","useEffect","Redirect","useLocation","apiCall","Unprocessed","FailedProcesses","failedProcesses","setFailedProcesses","isLoaded","setIsLoaded","error","setError","loggedIn","setloggedIn","localStorage","getItem","parseInt","loggedInUser","setLoggedInUser","JSON","parse","currentTab","setCurrentTab","params","job","state","handleClick","callerId","mounted","operation","query","variables","then","res","data","getAllProcessingErrors","name","code","message","err","response","errors","pathname","action","restrictions","pages","includes","role"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Redirect, useLocation } from 'react-router-dom';\nimport apiCall from '../../hooks/api-call';\nimport Unprocessed from './unprocessed';\n\nconst FailedProcesses = () => {\n  const [failedProcesses, setFailedProcesses] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const [loggedIn, setloggedIn] = useState(localStorage.getItem('loggedIn') ? parseInt(localStorage.getItem('loggedIn')) : 0);\n  const [loggedInUser, setLoggedInUser] = useState(localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null);\n  const [currentTab, setCurrentTab] = useState(null);\n  \n  // Get the state values passed on the user's clicking of a redirect link.\n  const params = useLocation();\n  const job = params ? params?.state?.job : null;\n\n  // Handle the user choosing another tab on this page.\n  const handleClick = (callerId) => {\n    // setIsLoaded(false);    \n    setCurrentTab(callerId);\n  }\n\n  // Get the unprocessed jobs from the DB.\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n      const operation = 'getAllProcessingErrors';\n      const query = `query ${operation} {${operation} {Id Name OrderNumber LineNumber Category ExternalSystem DataDirection At Message Exception AdditionalData}}`;\n      const variables = {};\n      \n      apiCall(operation, query, variables)\n      .then(\n        res => {          \n          if (res.data) {\n            setFailedProcesses(res.data.getAllProcessingErrors);\n            setError(null);\n            setIsLoaded(true);\n          } else if (res.name) {\n            setError({code: res.name, message: res.message});\n            setIsLoaded(true);\n          }\n        },\n        err => {\n          setError(err.response.data.errors);\n          setIsLoaded(false);\n        }\n      );\n    }\n    \n    return () => mounted = false;\n  }, [currentTab]);\n\n  // Set the loggedIn variable.\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n      setloggedIn(localStorage.getItem('loggedIn') ? parseInt(localStorage.getItem('loggedIn')) : 0);\n      setLoggedInUser(localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null);\n    }\n    return () => mounted = false;\n  }, []);\n  \n  return !loggedIn ?\n  (\n    // <div className=\"signin-error\">You must sign in to access this resource.</div>\n    <Redirect to={\n        {\n          pathname: '/login',\n          state: {\n            action: 'Sign In',\n            message: 'Please sign in.'\n          },\n        }\n      }\n    />\n  )\n  : error ?\n  (\n    <div className=\"signin-error\">{error?.message}</div>\n  )\n  :\n  (\n    loggedInUser && (loggedInUser.restrictions.pages === 'None' || !loggedInUser.restrictions.pages.includes('Failed Processes')) ?\n    (\n      <Unprocessed jobs={failedProcesses} error={error} isLoaded={isLoaded} handleClick={handleClick} activeTab={currentTab ? currentTab : job ? job : null} />\n    )\n    :\n    (\n      <div className=\"role-denied\">Your profile's assigned role of \"{loggedInUser.role}\" does not allow you to access this page.</div>\n    )\n  )\n};\n\nexport default FailedProcesses;\n"]},"metadata":{},"sourceType":"module"}