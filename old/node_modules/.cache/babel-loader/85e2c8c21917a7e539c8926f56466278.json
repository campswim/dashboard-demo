{"ast":null,"code":"import apiCall from './api-call';\nexport async function checkDbConnection() {\n  const operation = 'checkDbConnection';\n  const query = `query ${operation} {${operation} {Connected, Message}}`;\n  return await apiCall(operation, query).then(res => {\n    return res;\n  }, err => {\n    return err;\n  });\n}\n;\nexport async function getAllActiveItems(daysBack, markets) {\n  if ('number' !== typeof daysBack) daysBack = parseInt(daysBack);\n  const operation = 'getAllActiveItems';\n  const query = `query ${operation}($daysBack: Int!, $markets: [String]!) {${operation}(daysBack: $daysBack, markets: $markets) {ItemCode, Country}}`;\n  const variables = {\n    daysBack,\n    markets\n  };\n  return await apiCall(operation, query, variables).then(res => {\n    return res;\n  }, err => {\n    return err;\n  });\n}\n;\nexport async function getAllErpItems(itemCodes, markets, environment) {\n  const operation = 'getAllErpItems';\n  const query = `query ${operation}($itemCodes: [ItemObject]!, $markets: [String]!, $environment: String) {${operation}(itemCodes: $itemCodes, markets: $markets, environment: $environment) {ItemCode Country Error}}`;\n  const variables = {\n    itemCodes,\n    markets,\n    environment\n  };\n  return await apiCall(operation, query, variables).then(res => {\n    return res;\n  }, err => {\n    return err;\n  });\n}\nexport async function getAllFailedProcesses() {\n  const operation = 'getAllProcessingErrors';\n  const query = `query ${operation} {${operation} {Id, Name, ProcessJobId, Category, ExternalSystem, DataDirection}}`;\n  const jobs = {};\n  return await apiCall(operation, query).then(res => {\n    var _res$data;\n\n    const results = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.getAllProcessingErrors;\n    const errors = res === null || res === void 0 ? void 0 : res.errors;\n\n    if (results) {\n      var _res$data2;\n\n      const allErrors = (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.getAllProcessingErrors;\n\n      if (allErrors) {\n        allErrors.forEach(error => {\n          if (!jobs[error.ProcessJobId]) {\n            jobs[error.ProcessJobId] = {\n              Name: error.Name,\n              Count: 1,\n              Direction: error.DataDirection,\n              ExternalSystem: error.ExternalSystem,\n              Categories: [error.Category]\n            };\n          } else {\n            let count = jobs[error.ProcessJobId].Count;\n            jobs[error.ProcessJobId].Count = count + 1;\n            if (!jobs[error.ProcessJobId].Categories.includes(error.Category)) jobs[error.ProcessJobId].Categories.push(error.Category);\n          }\n        });\n      }\n\n      return jobs;\n    } else if (errors) {\n      const errors = res === null || res === void 0 ? void 0 : res.errors;\n\n      if (Array.isArray(errors)) {\n        errors.forEach((error, idx) => {\n          jobs.errors = {\n            [idx]: error.message\n          };\n        });\n      } else {\n        jobs.errors = errors.message;\n      }\n\n      return jobs;\n    }\n  }, err => {\n    return err;\n  });\n}","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/get-dashboard.js"],"names":["apiCall","checkDbConnection","operation","query","then","res","err","getAllActiveItems","daysBack","markets","parseInt","variables","getAllErpItems","itemCodes","environment","getAllFailedProcesses","jobs","results","data","getAllProcessingErrors","errors","allErrors","forEach","error","ProcessJobId","Name","Count","Direction","DataDirection","ExternalSystem","Categories","Category","count","includes","push","Array","isArray","idx","message"],"mappings":"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","sourcesContent":["import apiCall from './api-call';\n\nexport async function checkDbConnection() {\n  const operation = 'checkDbConnection';\n  const query = `query ${operation} {${operation} {Connected, Message}}`;\n  return await apiCall(operation, query).then(\n    res => { return res; },\n    err => { return err; }\n  );\n};\n\nexport async function getAllActiveItems(daysBack, markets) {    \n  if ('number' !== typeof daysBack) daysBack = parseInt(daysBack);\n  const operation = 'getAllActiveItems';\n  const query = `query ${operation}($daysBack: Int!, $markets: [String]!) {${operation}(daysBack: $daysBack, markets: $markets) {ItemCode, Country}}`;\n  const variables = { daysBack, markets };\n  \n  return await apiCall(operation, query, variables).then(\n    res => { return res; },\n    err => { return err; }\n  );\n};\n\nexport async function getAllErpItems(itemCodes, markets, environment) {    \n  const operation = 'getAllErpItems';\n  const query = `query ${operation}($itemCodes: [ItemObject]!, $markets: [String]!, $environment: String) {${operation}(itemCodes: $itemCodes, markets: $markets, environment: $environment) {ItemCode Country Error}}`;\n  const variables = { itemCodes, markets, environment };\n  return await apiCall(operation, query, variables).then(\n    res => { return res; },\n    err => { return err; }\n  );\n}\n\nexport async function getAllFailedProcesses() {\n  const operation = 'getAllProcessingErrors';\n  const query = `query ${operation} {${operation} {Id, Name, ProcessJobId, Category, ExternalSystem, DataDirection}}`;\n  const jobs = {};\n\n  return await apiCall(operation, query).then(\n    res => {\n      const results = res?.data?.getAllProcessingErrors;\n      const errors = res?.errors;\n      \n      if (results) {\n        const allErrors = res.data?.getAllProcessingErrors;\n\n        if (allErrors) {\n          allErrors.forEach(error => {\n            if (!jobs[error.ProcessJobId]) {\n              jobs[error.ProcessJobId] = { \n                Name: error.Name, \n                Count: 1, \n                Direction: error.DataDirection, \n                ExternalSystem: error.ExternalSystem, \n                Categories: [error.Category]\n              };\n            } else {\n              let count = jobs[error.ProcessJobId].Count;\n              jobs[error.ProcessJobId].Count = count + 1;\n              \n              if (!jobs[error.ProcessJobId].Categories.includes(error.Category)) jobs[error.ProcessJobId].Categories.push(error.Category);\n            }\n          });\n        }\n\n        return jobs;\n      } else if (errors) {\n        const errors = res?.errors;\n\n        if (Array.isArray(errors)) {\n          errors.forEach((error, idx) => {\n            jobs.errors = { [idx]: error.message };\n          })\n        } else {\n          jobs.errors = errors.message;\n        }\n\n        return jobs;\n      }\n    },\n    err => { \n      return err; }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}