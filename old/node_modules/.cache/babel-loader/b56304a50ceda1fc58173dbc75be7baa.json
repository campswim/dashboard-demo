{"ast":null,"code":"import apiCall from './api-call';\nexport default async function getType(table, column) {\n  if (!column) return;\n  const operation = 'getType';\n  const query = `query ${operation}($table: String!, $column: String!) {${operation}(table: $table, column: $column) {ColumnName DataType MaxLength}}`;\n  const variables = {\n    table,\n    column\n  };\n  const typeMap = {\n    bool: 'boolean',\n    int: 'number',\n    tinyint: 'number',\n    long: 'bigint',\n    byte: 'number',\n    float: 'number',\n    double: 'number',\n    decimal: 'number',\n    DateTime: 'object',\n    char: 'string',\n    varchar: 'string',\n    object: 'object',\n    string: 'string',\n    JSON: 'object',\n    XML: 'string'\n  };\n  return await apiCall(operation, query, variables).then(res => {\n    // res.data.getType => { ColumnName, DataType, MaxLength }\n    if (res.data) {\n      var _res$data;\n\n      const columnConfig = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.getType;\n      const type = typeMap[columnConfig.DataType];\n      columnConfig.DataType = type;\n      return columnConfig;\n    }\n  }, err => {\n    console.error({\n      err\n    });\n  });\n}","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/get-type.js"],"names":["apiCall","getType","table","column","operation","query","variables","typeMap","bool","int","tinyint","long","byte","float","double","decimal","DateTime","char","varchar","object","string","JSON","XML","then","res","data","columnConfig","type","DataType","err","console","error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AAEA,eAAe,eAAeC,OAAf,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AACnD,MAAI,CAACA,MAAL,EAAa;AAEb,QAAMC,SAAS,GAAG,SAAlB;AACA,QAAMC,KAAK,GAAI,SAAQD,SAAU,wCAAuCA,SAAU,mEAAlF;AACA,QAAME,SAAS,GAAG;AAAEJ,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAlB;AACA,QAAMI,OAAO,GAAG;AACdC,IAAAA,IAAI,EAAE,SADQ;AAEdC,IAAAA,GAAG,EAAE,QAFS;AAGdC,IAAAA,OAAO,EAAE,QAHK;AAIdC,IAAAA,IAAI,EAAE,QAJQ;AAKdC,IAAAA,IAAI,EAAE,QALQ;AAMdC,IAAAA,KAAK,EAAE,QANO;AAOdC,IAAAA,MAAM,EAAE,QAPM;AAQdC,IAAAA,OAAO,EAAE,QARK;AASdC,IAAAA,QAAQ,EAAE,QATI;AAUdC,IAAAA,IAAI,EAAE,QAVQ;AAWdC,IAAAA,OAAO,EAAE,QAXK;AAYdC,IAAAA,MAAM,EAAE,QAZM;AAadC,IAAAA,MAAM,EAAE,QAbM;AAcdC,IAAAA,IAAI,EAAE,QAdQ;AAedC,IAAAA,GAAG,EAAE;AAfS,GAAhB;AAkBA,SAAO,MAAMtB,OAAO,CAACI,SAAD,EAAYC,KAAZ,EAAmBC,SAAnB,CAAP,CAAqCiB,IAArC,CACXC,GAAG,IAAI;AAAE;AACP,QAAIA,GAAG,CAACC,IAAR,EAAc;AAAA;;AACZ,YAAMC,YAAY,gBAAGF,GAAG,CAACC,IAAP,8CAAG,UAAUxB,OAA/B;AACA,YAAM0B,IAAI,GAAGpB,OAAO,CAACmB,YAAY,CAACE,QAAd,CAApB;AACAF,MAAAA,YAAY,CAACE,QAAb,GAAwBD,IAAxB;AACA,aAAOD,YAAP;AACD;AACF,GARU,EASXG,GAAG,IAAI;AAAEC,IAAAA,OAAO,CAACC,KAAR,CAAc;AAACF,MAAAA;AAAD,KAAd;AAAsB,GATpB,CAAb;AAWD","sourcesContent":["import apiCall from './api-call';\n\nexport default async function getType(table, column) {  \n  if (!column) return;\n\n  const operation = 'getType';\n  const query = `query ${operation}($table: String!, $column: String!) {${operation}(table: $table, column: $column) {ColumnName DataType MaxLength}}`;\n  const variables = { table, column };\n  const typeMap = {\n    bool: 'boolean',\n    int: 'number',\n    tinyint: 'number',\n    long: 'bigint',\n    byte: 'number',\n    float: 'number',\n    double: 'number',\n    decimal: 'number',\n    DateTime: 'object',\n    char: 'string',\n    varchar: 'string',\n    object: 'object',\n    string: 'string',\n    JSON: 'object',\n    XML: 'string'\n  };\n\n  return await apiCall(operation, query, variables).then(\n    res => { // res.data.getType => { ColumnName, DataType, MaxLength }\n      if (res.data) {\n        const columnConfig = res.data?.getType;\n        const type = typeMap[columnConfig.DataType];\n        columnConfig.DataType = type;\n        return columnConfig; \n      }\n    },\n    err => { console.error({err}) }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}