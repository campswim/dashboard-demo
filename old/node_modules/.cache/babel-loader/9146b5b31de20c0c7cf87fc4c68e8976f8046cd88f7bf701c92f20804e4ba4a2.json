{"ast":null,"code":"import apiCall from './api-call';\nexport async function getSettings(path) {\n  const operation = `${path}`;\n  let query = `query ${operation} {${operation} `;\n  query += 'maps' === operation ? `{Id IsoCountryCode ErpCompanyId SourceWarehouse SourceShipMethod DestinationWarehouse IsoCurrencyCode ErpCurrencyCode ProcessingSequence ActivatedAt DeactivatedAt ModifiedAt ModifiedBy Error {name code message}}}` : `{Name Value ProcessJobIds Category SubCategory ValueTypeId ValueType Notes EnabledDate ModifiedAt ModifiedBy UserId Error {name code message}}}`;\n  const result = await apiCall(operation, query).then(res => {\n    return res;\n  }, err => {\n    console.error(err);\n  });\n  return result;\n}\n;\nexport async function updateSettings(path, name, column, newValue) {\n  if (!newValue) newValue = null;\n  const operation = `${path}Update`;\n  let query = `mutation ${path}Update($id: ID!, $column: String!, $newValue: String) {${path}Update(id: $id, column: $column, newValue: $newValue)`;\n  if (path === 'params') query += `{Name${column !== 'Name' ? ' ' + column : ''} ValueTypeId EnabledDate Error {message}}}`;else if (path === 'maps') query += `{Id ${column} Error {message}}}`;\n  const variables = {\n    id: name,\n    column: column,\n    newValue\n  };\n  const result = await apiCall(operation, query, variables).then(res => {\n    return res;\n  }, err => {\n    console.error(err);\n  });\n  return result;\n}\n;\nexport async function getParamByName(name) {\n  const operation = 'getParamByName';\n  const query = `query ${operation}($name: String!) {${operation}(name: $name) {Value EnabledDate Error {message}}}`;\n  const variables = {\n    name\n  };\n  const result = await apiCall(operation, query, variables).then(res => {\n    return res === null || res === void 0 ? void 0 : res.data;\n  }, err => {\n    console.error(err);\n  });\n  return result;\n}\n;\nexport async function getValueTypeId(dataType) {\n  const operation = 'getValueTypeId';\n  const query = `query ${operation}($dataType: String!) {${operation}(dataType: $dataType) {Id}}`;\n  const variables = {\n    dataType\n  };\n  const result = await apiCall(operation, query, variables).then(res => {\n    var _res$data, _res$data$getValueTyp;\n    return res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$getValueTyp = _res$data.getValueTypeId) === null || _res$data$getValueTyp === void 0 ? void 0 : _res$data$getValueTyp.Id;\n  }, err => console.error(err));\n  return result;\n}\n;","map":{"version":3,"names":["apiCall","getSettings","path","operation","query","result","then","res","err","console","error","updateSettings","name","column","newValue","variables","id","getParamByName","data","getValueTypeId","dataType","_res$data","_res$data$getValueTyp","Id"],"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/get-settings.js"],"sourcesContent":["import apiCall from './api-call';\n\nexport async function getSettings(path) {\n  const operation = `${path}`;\n  let query = `query ${operation} {${operation} `;\n  query += 'maps' === operation ? `{Id IsoCountryCode ErpCompanyId SourceWarehouse SourceShipMethod DestinationWarehouse IsoCurrencyCode ErpCurrencyCode ProcessingSequence ActivatedAt DeactivatedAt ModifiedAt ModifiedBy Error {name code message}}}` : `{Name Value ProcessJobIds Category SubCategory ValueTypeId ValueType Notes EnabledDate ModifiedAt ModifiedBy UserId Error {name code message}}}`;\n  \n  const result = await apiCall(operation, query).then(\n    res => { return res; },\n    err => { console.error(err); }\n  );\n\n  return result;\n};\n\nexport async function updateSettings(path, name, column, newValue) {\n  if (!newValue) newValue = null;\n  const operation = `${path}Update`;\n  let query = `mutation ${path}Update($id: ID!, $column: String!, $newValue: String) {${path}Update(id: $id, column: $column, newValue: $newValue)`;\n  if (path === 'params') query += `{Name${column !== 'Name' ? ' ' + column : '' } ValueTypeId EnabledDate Error {message}}}`;\n  else if (path === 'maps') query += `{Id ${column} Error {message}}}`;\n  const variables = { id: name, column: column, newValue };\n  const result = await apiCall(operation, query, variables).then(\n    res => { return res; },\n    err => { console.error(err); }\n  );\n\n  return result;\n};\n\nexport async function getParamByName(name) {\n  const operation = 'getParamByName';\n  const query = `query ${operation}($name: String!) {${operation}(name: $name) {Value EnabledDate Error {message}}}`;\n  const variables = { name };\n  const result = await apiCall(operation, query, variables).then(\n    res => { return res?.data; },\n    err => { console.error(err); }\n  );\n\n  return result;\n};\n\nexport async function getValueTypeId(dataType) {\n  const operation = 'getValueTypeId';\n  const query = `query ${operation}($dataType: String!) {${operation}(dataType: $dataType) {Id}}`;\n  const variables = { dataType };\n  const result = await apiCall(operation, query, variables).then(\n    res => { return res?.data?.getValueTypeId?.Id; },\n    err => console.error(err)\n  );\n\n  return result;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}