{"ast":null,"code":"import apiCall from './api-call';\nexport async function getSettings(path) {\n  const operation = `${path}`;\n  let query = `query ${operation} {${operation} `;\n  query += 'maps' === operation ? `{Id IsoCountryCode ErpCompanyId SourceWarehouse SourceShipMethod DestinationWarehouse IsoCurrencyCode ErpCurrencyCode ProcessingSequence ActivatedAt DeactivatedAt ModifiedAt ModifiedBy Error {name code message}}}` : `{Name Value Category SubCategory ValueTypeId ValueType Notes EnabledDate ModifiedAt ModifiedBy UserId Error {name code message}}}`;\n  const result = await apiCall(operation, query).then(res => {\n    return res;\n  }, err => {\n    console.error(err);\n  });\n  return result;\n}\n;\nexport async function updateSettings(path, name, column, newValue) {\n  if (!newValue) newValue = null;\n  const operation = `${path}Update`;\n  let query = `mutation ${path}Update($id: ID!, $column: String!, $newValue: String) {${path}Update(id: $id, column: $column, newValue: $newValue)`;\n  if (path === 'params') query += `{Name${column !== 'Name' ? ' ' + column : ''} ValueTypeId EnabledDate Error {message}}}`;else if (path === 'maps') query += `{Id ${column} Error {message}}}`;\n  const variables = {\n    id: name,\n    column: column,\n    newValue\n  };\n  const result = await apiCall(operation, query, variables).then(res => {\n    return res;\n  }, err => {\n    console.error(err);\n  });\n  return result;\n}\n;\nexport async function getParamByName(name) {\n  const operation = 'getParamByName';\n  const query = `query ${operation}($name: String!) {${operation}(name: $name) {Value EnabledDate Error {message}}}`;\n  const variables = {\n    name\n  };\n  const result = await apiCall(operation, query, variables).then(res => {\n    return res === null || res === void 0 ? void 0 : res.data;\n  }, err => {\n    console.error(err);\n  });\n  return result;\n}\n;\nexport async function getValueTypeId(dataType) {\n  const operation = 'getValueTypeId';\n  const query = `query ${operation}($dataType: String!) {${operation}(dataType: $dataType) {Id}}`;\n  const variables = {\n    dataType\n  };\n  const result = await apiCall(operation, query, variables).then(res => {\n    var _res$data, _res$data$getValueTyp;\n\n    return res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$getValueTyp = _res$data.getValueTypeId) === null || _res$data$getValueTyp === void 0 ? void 0 : _res$data$getValueTyp.Id;\n  }, err => console.error(err));\n  return result;\n}\n;","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/get-settings.js"],"names":["apiCall","getSettings","path","operation","query","result","then","res","err","console","error","updateSettings","name","column","newValue","variables","id","getParamByName","data","getValueTypeId","dataType","Id"],"mappings":"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","sourcesContent":["import apiCall from './api-call';\n\nexport async function getSettings(path) {\n  const operation = `${path}`;\n  let query = `query ${operation} {${operation} `;\n  query += 'maps' === operation ? `{Id IsoCountryCode ErpCompanyId SourceWarehouse SourceShipMethod DestinationWarehouse IsoCurrencyCode ErpCurrencyCode ProcessingSequence ActivatedAt DeactivatedAt ModifiedAt ModifiedBy Error {name code message}}}` : `{Name Value Category SubCategory ValueTypeId ValueType Notes EnabledDate ModifiedAt ModifiedBy UserId Error {name code message}}}`;\n  \n  const result = await apiCall(operation, query).then(\n    res => { return res; },\n    err => { console.error(err); }\n  );\n\n  return result;\n};\n\nexport async function updateSettings(path, name, column, newValue) {\n  if (!newValue) newValue = null;\n  const operation = `${path}Update`;\n  let query = `mutation ${path}Update($id: ID!, $column: String!, $newValue: String) {${path}Update(id: $id, column: $column, newValue: $newValue)`;\n  if (path === 'params') query += `{Name${column !== 'Name' ? ' ' + column : '' } ValueTypeId EnabledDate Error {message}}}`;\n  else if (path === 'maps') query += `{Id ${column} Error {message}}}`;\n  const variables = { id: name, column: column, newValue };\n  const result = await apiCall(operation, query, variables).then(\n    res => { return res; },\n    err => { console.error(err); }\n  );\n\n  return result;\n};\n\nexport async function getParamByName(name) {\n  const operation = 'getParamByName';\n  const query = `query ${operation}($name: String!) {${operation}(name: $name) {Value EnabledDate Error {message}}}`;\n  const variables = { name };\n  const result = await apiCall(operation, query, variables).then(\n    res => { return res?.data; },\n    err => { console.error(err); }\n  );\n\n  return result;\n};\n\nexport async function getValueTypeId(dataType) {\n  const operation = 'getValueTypeId';\n  const query = `query ${operation}($dataType: String!) {${operation}(dataType: $dataType) {Id}}`;\n  const variables = { dataType };\n  const result = await apiCall(operation, query, variables).then(\n    res => { return res?.data?.getValueTypeId?.Id; },\n    err => console.error(err)\n  );\n\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}