{"ast":null,"code":"import apiCall from './api-call';\nexport default async function getType(table, column) {\n  if (!column) return;\n  const operation = 'getType';\n  const query = `query ${operation}($table: String!, $column: String!) {${operation}(table: $table, column: $column) {ColumnName DataType MaxLength}}`;\n  const variables = {\n    table,\n    column\n  };\n  const typeMap = {\n    bool: 'boolean',\n    int: 'number',\n    tinyint: 'number',\n    long: 'bigint',\n    byte: 'number',\n    float: 'number',\n    double: 'number',\n    decimal: 'number',\n    DateTime: 'object',\n    char: 'string',\n    varchar: 'string',\n    object: 'object',\n    string: 'string',\n    JSON: 'object',\n    XML: 'string'\n  };\n  return await apiCall(operation, query, variables).then(res => {\n    // res.data.getType => { ColumnName, DataType, MaxLength }\n    if (res.data) {\n      var _res$data;\n      const columnConfig = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.getType;\n      const type = typeMap[columnConfig.DataType];\n      columnConfig.DataType = type;\n      return columnConfig;\n    }\n  }, err => {\n    console.error({\n      err\n    });\n  });\n}","map":{"version":3,"names":["apiCall","getType","table","column","operation","query","variables","typeMap","bool","int","tinyint","long","byte","float","double","decimal","DateTime","char","varchar","object","string","JSON","XML","then","res","data","_res$data","columnConfig","type","DataType","err","console","error"],"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/get-type.js"],"sourcesContent":["import apiCall from './api-call';\n\nexport default async function getType(table, column) {  \n  if (!column) return;\n\n  const operation = 'getType';\n  const query = `query ${operation}($table: String!, $column: String!) {${operation}(table: $table, column: $column) {ColumnName DataType MaxLength}}`;\n  const variables = { table, column };\n  const typeMap = {\n    bool: 'boolean',\n    int: 'number',\n    tinyint: 'number',\n    long: 'bigint',\n    byte: 'number',\n    float: 'number',\n    double: 'number',\n    decimal: 'number',\n    DateTime: 'object',\n    char: 'string',\n    varchar: 'string',\n    object: 'object',\n    string: 'string',\n    JSON: 'object',\n    XML: 'string'\n  };\n\n  return await apiCall(operation, query, variables).then(\n    res => { // res.data.getType => { ColumnName, DataType, MaxLength }\n      if (res.data) {\n        const columnConfig = res.data?.getType;\n        const type = typeMap[columnConfig.DataType];\n        columnConfig.DataType = type;\n        return columnConfig; \n      }\n    },\n    err => { console.error({err}) }\n  );\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,YAAY;AAEhC,eAAe,eAAeC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACnD,IAAI,CAACA,MAAM,EAAE;EAEb,MAAMC,SAAS,GAAG,SAAS;EAC3B,MAAMC,KAAK,GAAI,SAAQD,SAAU,wCAAuCA,SAAU,mEAAkE;EACpJ,MAAME,SAAS,GAAG;IAAEJ,KAAK;IAAEC;EAAO,CAAC;EACnC,MAAMI,OAAO,GAAG;IACdC,IAAI,EAAE,SAAS;IACfC,GAAG,EAAE,QAAQ;IACbC,OAAO,EAAE,QAAQ;IACjBC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE,QAAQ;IACfC,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE,QAAQ;IACjBC,QAAQ,EAAE,QAAQ;IAClBC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE,QAAQ;IACjBC,MAAM,EAAE,QAAQ;IAChBC,MAAM,EAAE,QAAQ;IAChBC,IAAI,EAAE,QAAQ;IACdC,GAAG,EAAE;EACP,CAAC;EAED,OAAO,MAAMtB,OAAO,CAACI,SAAS,EAAEC,KAAK,EAAEC,SAAS,CAAC,CAACiB,IAAI,CACpDC,GAAG,IAAI;IAAE;IACP,IAAIA,GAAG,CAACC,IAAI,EAAE;MAAA,IAAAC,SAAA;MACZ,MAAMC,YAAY,IAAAD,SAAA,GAAGF,GAAG,CAACC,IAAI,cAAAC,SAAA,uBAARA,SAAA,CAAUzB,OAAO;MACtC,MAAM2B,IAAI,GAAGrB,OAAO,CAACoB,YAAY,CAACE,QAAQ,CAAC;MAC3CF,YAAY,CAACE,QAAQ,GAAGD,IAAI;MAC5B,OAAOD,YAAY;IACrB;EACF,CAAC,EACDG,GAAG,IAAI;IAAEC,OAAO,CAACC,KAAK,CAAC;MAACF;IAAG,CAAC,CAAC;EAAC,CAChC,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}