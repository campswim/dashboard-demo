{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useMemo } from 'react';\nconst useSort = (items, caller) => {\n  _s();\n  if (!items) items = [];\n  if (items['data'] && items['data']['failedPulls']) items = items.data.failedPulls;\n  if (items['data'] && items['data']['failedPushes']) items = items.data.failedPushes;\n  const [sortConfig, setSortConfig] = useState({\n    key: caller === 'params' || caller === 'users' ? 'Name' : caller === 'map' ? 'Id' : caller === 'unpulled' || caller === 'unpushed' || caller === 'ignored' ? 'OrderNumber' : caller === 'order-details' ? 'lineNumber' : caller === 'jobs' || caller === 'payments' ? 'OrderNumber' : caller === 'jobs-summary' ? 'Count' : caller === 'staged' ? 'market' : 'missing-items' ? 'itemCode' : null,\n    direction: 'ascending'\n  });\n  const sortedData = useMemo(() => {\n    let sortedItems = items && items.length > 0 ? [...items] : [];\n    sortedItems.sort((a, b) => {\n      let elementOne = a[sortConfig.key];\n      let elementTwo = b[sortConfig.key];\n\n      // Correct for cases when the user ID is used in the ModifiedBy field, i.e., when a job modifies a parameter, not a user.\n      if (sortConfig.key === 'ModifiedBy') {\n        if (!elementOne && a.UserId && isNaN(a.UserId)) elementOne = a.UserId;\n        if (!elementTwo && b.UserId && isNaN(b.UserId)) elementTwo = b.UserId;\n      }\n      if (!isNaN(parseInt(elementOne)) && !isNaN(parseInt(elementTwo))) {\n        elementOne = parseInt(elementOne);\n        elementTwo = parseInt(elementTwo);\n      } else if ('EnabledDate' === sortConfig.key) {\n        if (elementOne && elementOne.includes('T')) elementOne = new Date(elementOne).getUTCMilliseconds();\n        if (elementTwo && elementTwo.includes('T')) elementTwo = new Date(elementTwo).getUTCMilliseconds();\n      }\n\n      // Correct for null or undefined;\n      if (elementOne === null || elementOne === undefined) elementOne = '';\n      if (elementTwo === null || elementTwo === undefined) elementTwo = '';\n      if (typeof elementOne === 'string' && typeof elementTwo === 'string') {\n        if (elementOne.toUpperCase() < elementTwo.toUpperCase()) return sortConfig.direction === 'ascending' ? -1 : 1;else if (elementOne.toUpperCase() > elementTwo.toUpperCase()) return sortConfig.direction === 'ascending' ? 1 : -1;\n      } else {\n        if (elementOne < elementTwo) return sortConfig.direction === 'ascending' ? -1 : 1;else if (elementOne > elementTwo) return sortConfig.direction === 'ascending' ? 1 : -1;\n      }\n      return 0;\n    });\n    return sortedItems;\n  }, [items, sortConfig]);\n  const requestSort = (key, override, pause = false) => {\n    if (pause) return;\n    let direction = 'ascending';\n    if (!override) {\n      if (sortConfig.key === key && sortConfig.direction === 'ascending') direction = 'descending';\n    } else direction = override;\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n  return {\n    items: sortedData,\n    requestSort,\n    sortConfig\n  };\n};\n_s(useSort, \"P2POCCAyTQukUzKduCDVIRd6MCE=\");\nexport default useSort;","map":{"version":3,"names":["useState","useMemo","useSort","items","caller","_s","data","failedPulls","failedPushes","sortConfig","setSortConfig","key","direction","sortedData","sortedItems","length","sort","a","b","elementOne","elementTwo","UserId","isNaN","parseInt","includes","Date","getUTCMilliseconds","undefined","toUpperCase","requestSort","override","pause"],"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/sort-data.js"],"sourcesContent":["import { useState, useMemo } from 'react';\n\nconst useSort = (items, caller) => {\n  if (!items) items = [];\n  if (items['data'] && items['data']['failedPulls']) items = items.data.failedPulls;\n  if (items['data'] && items['data']['failedPushes']) items = items.data.failedPushes;\n  \n  const [sortConfig, setSortConfig] = useState({\n    key: caller === 'params' || caller === 'users' ? 'Name' : caller === 'map' ? 'Id' : caller === 'unpulled' || caller === 'unpushed' || caller === 'ignored' ? 'OrderNumber' : caller === 'order-details' ? 'lineNumber' : caller === 'jobs' || caller === 'payments' ? 'OrderNumber' : caller === 'jobs-summary' ? 'Count' : caller === 'staged' ? 'market' : 'missing-items' ? 'itemCode' : null,\n    direction: 'ascending',\n  });\n\n  const sortedData = useMemo(() => {\n    let sortedItems = items && items.length > 0 ? [...items] : [];\n\n    sortedItems.sort((a, b) => {\n      let elementOne = a[sortConfig.key];\n      let elementTwo = b[sortConfig.key];\n      \n      // Correct for cases when the user ID is used in the ModifiedBy field, i.e., when a job modifies a parameter, not a user.\n      if (sortConfig.key === 'ModifiedBy') {\n        if (!elementOne && a.UserId && isNaN(a.UserId)) elementOne = a.UserId;\n        if (!elementTwo && b.UserId && isNaN(b.UserId)) elementTwo = b.UserId;\n      }\n\n      if (!isNaN(parseInt(elementOne)) && !isNaN(parseInt(elementTwo))) {\n        elementOne = parseInt(elementOne);\n        elementTwo = parseInt(elementTwo);\n      } else if ('EnabledDate' === sortConfig.key) {\n        if (elementOne && elementOne.includes('T')) elementOne = new Date(elementOne).getUTCMilliseconds();\n        if (elementTwo && elementTwo.includes('T')) elementTwo = new Date (elementTwo).getUTCMilliseconds();\n      }\n\n      // Correct for null or undefined;\n      if (elementOne === null || elementOne === undefined) elementOne = '';\n      if (elementTwo === null || elementTwo === undefined) elementTwo = '';\n      \n      if (typeof elementOne === 'string' && typeof elementTwo === 'string') {\n        if (elementOne.toUpperCase() < elementTwo.toUpperCase())\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        else if (elementOne.toUpperCase() > elementTwo.toUpperCase())\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n      } else {\n        if (elementOne < elementTwo)\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        else if (elementOne > elementTwo)\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n      }\n      return 0;\n    });\n\n    return sortedItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key, override, pause = false) => {\n    if (pause) return;\n    let direction = 'ascending';\n    if (!override) {\n      if (sortConfig.key === key && sortConfig.direction === 'ascending') direction = 'descending';\n    } else direction = override;\n\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedData, requestSort, sortConfig };\n};\n\nexport default useSort;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}