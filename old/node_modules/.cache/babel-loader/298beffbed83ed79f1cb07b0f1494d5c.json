{"ast":null,"code":"var _jsxFileName = \"/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/pages/home/failed-processes/failed-processes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getAllFailedProcesses } from '../../../hooks/get-dashboard';\nimport FailedJobs from './failed-jobs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FailedProcesses = () => {\n  _s();\n\n  const [failedProcesses, setFailedProcesses] = useState({});\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null); // Get the data from the db.\n\n  useEffect(() => {\n    getAllFailedProcesses().then(res => {\n      if (res === null || res === void 0 ? void 0 : res.errors) {\n        const errors = Object.values(res.errors);\n        errors.forEach(error => setError(`${error}\\n`));\n      } else {\n        setFailedProcesses(res);\n        setIsLoaded(true);\n      }\n    }, err => {\n      setError(`Error: ${err.message}`);\n      setIsLoaded(false);\n    });\n  }, []);\n  return error ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signin-error\",\n    children: error === null || error === void 0 ? void 0 : error.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"section-title\",\n      children: \"Summary of Failed Processes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FailedJobs, {\n      data: failedProcesses,\n      isLoaded: isLoaded,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FailedProcesses, \"WI27FLfK4IOE9rSJMD6c2YDU5uY=\");\n\n_c = FailedProcesses;\nexport default FailedProcesses;\n\nvar _c;\n\n$RefreshReg$(_c, \"FailedProcesses\");","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/pages/home/failed-processes/failed-processes.js"],"names":["React","useState","useEffect","getAllFailedProcesses","FailedJobs","FailedProcesses","failedProcesses","setFailedProcesses","isLoaded","setIsLoaded","error","setError","then","res","errors","Object","values","forEach","err","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AACA,OAAOC,UAAP,MAAuB,eAAvB;;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC,CAH4B,CAK5B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,qBAAqB,GAAGS,IAAxB,CACEC,GAAG,IAAI;AACL,UAAIA,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEC,MAAT,EAAiB;AACf,cAAMA,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcH,GAAG,CAACC,MAAlB,CAAf;AACAA,QAAAA,MAAM,CAACG,OAAP,CAAeP,KAAK,IAAIC,QAAQ,CAAE,GAAED,KAAM,IAAV,CAAhC;AACD,OAHD,MAGO;AACLH,QAAAA,kBAAkB,CAACM,GAAD,CAAlB;AACAJ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,KATH,EAUES,GAAG,IAAI;AACLP,MAAAA,QAAQ,CAAE,UAASO,GAAG,CAACC,OAAQ,EAAvB,CAAR;AACAV,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAbH;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,SAAOC,KAAK,gBAEV;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,cAA+BA,KAA/B,aAA+BA,KAA/B,uBAA+BA,KAAK,CAAES;AAAtC;AAAA;AAAA;AAAA;AAAA,UAFU,gBAMV;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEb,eAAlB;AAAmC,MAAA,QAAQ,EAAEE,QAA7C;AAAuD,MAAA,KAAK,EAAEE;AAA9D;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBANF;AAWD,CAnCD;;GAAML,e;;KAAAA,e;AAqCN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAllFailedProcesses } from '../../../hooks/get-dashboard';\nimport FailedJobs from './failed-jobs';\n\nconst FailedProcesses = () => {\n  const [failedProcesses, setFailedProcesses] = useState({});\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Get the data from the db.\n  useEffect(() => {\n    getAllFailedProcesses().then(\n      res => {\n        if (res?.errors) {\n          const errors = Object.values(res.errors);\n          errors.forEach(error => setError(`${error}\\n`));\n        } else {\n          setFailedProcesses(res);\n          setIsLoaded(true);\n        }\n      },\n      err => {\n        setError(`Error: ${err.message}`);\n        setIsLoaded(false);\n      }\n    );\n  }, []);\n  \n  return error ? \n  (\n    <div className=\"signin-error\">{error?.message}</div>\n  )\n  :\n  (\n    <>\n      <h3 className='section-title'>Summary of Failed Processes</h3>\n      <FailedJobs data={failedProcesses} isLoaded={isLoaded} error={error} />\n    </>\n  )\n};\n\nexport default FailedProcesses;\n"]},"metadata":{},"sourceType":"module"}