{"ast":null,"code":"var _jsxFileName = \"/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/pages/home/staged/staged-orders.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Staged from './staged';\nimport { getUnpushedOrders } from '../../../hooks/get-order';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StagedOrders = () => {\n  _s();\n\n  const [unpushed, setUnpushed] = useState(null);\n  const [unpushedError, setUnpushedError] = useState(null);\n  const [unpushedIsLoaded, setUnpushedIsLoaded] = useState(false);\n  const [failedPushes, setFailedPushes] = useState(null);\n  const [failedPushesError, setFailedPushesError] = useState(null);\n  const [failedPushesIsLoaded, setFailedPushesIsLoaded] = useState(false);\n  const [ignored, setIgnored] = useState(null);\n  const [ignoredError, setIgnoredError] = useState(null);\n  const [ignoredIsLoaded, setIgnoredIsLoaded] = useState(false);\n  const [apiError, setApiError] = useState(null); // Get the unpushed orders from the DB.\n\n  useEffect(() => {\n    let mounted = true;\n\n    if (mounted) {\n      getUnpushedOrders('unpushed').then(res => {\n        var _res$data;\n\n        const results = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.unpushed;\n        const errors = res === null || res === void 0 ? void 0 : res.errors;\n\n        if (results) {\n          var _results$;\n\n          const error = (_results$ = results[0]) === null || _results$ === void 0 ? void 0 : _results$.Error;\n\n          if (error) {\n            console.error({\n              error\n            });\n            setApiError(error);\n          } else {\n            let unpushedArray = [],\n                failedPushArray = [],\n                ignoredOrdersArray = [],\n                toReturn = [];\n            let unpushedObject = {},\n                failedPushObject = {},\n                ignoredOrdersObject = {};\n\n            if (results) {\n              results.forEach(order => {\n                if (null === order.PushStatusId) unpushedArray.push(order);else if (order.PushStatusId === 2) failedPushArray.push(order);else if (order.PushStatusId === 3) ignoredOrdersArray.push(order);\n              });\n            } // Set the unpushed orders.\n\n\n            if (unpushedArray) {\n              unpushedArray.forEach(order => {\n                if (!unpushedObject[order.Market]) unpushedObject[order.Market] = {\n                  orderCount: 1,\n                  totalAmount: order.OrderTotalAmount\n                };else {\n                  const count = unpushedObject[order.Market].orderCount;\n                  const total = unpushedObject[order.Market].totalAmount;\n                  unpushedObject[order.Market] = {\n                    orderCount: count + 1,\n                    totalAmount: total + order.OrderTotalAmount\n                  };\n                }\n              });\n              Object.keys(unpushedObject).forEach(key => toReturn.push({\n                market: key,\n                orderCount: unpushedObject[key].orderCount,\n                totalAmount: unpushedObject[key].totalAmount\n              }));\n              setUnpushed(toReturn);\n              setUnpushedError(null);\n              toReturn = [];\n              setUnpushedIsLoaded(true);\n            } // Set the failed-push orders.\n\n\n            if (failedPushArray) {\n              failedPushArray.forEach(order => {\n                if (!failedPushObject[order.Market]) failedPushObject[order.Market] = {\n                  orderCount: 1,\n                  totalAmount: order.OrderTotalAmount\n                };else {\n                  let count = failedPushObject[order.Market].orderCount;\n                  let total = failedPushObject[order.Market].totalAmount;\n                  failedPushObject[order.Market] = {\n                    orderCount: count + 1,\n                    totalAmount: total + order.OrderTotalAmount\n                  };\n                }\n              });\n              Object.keys(failedPushObject).forEach(key => toReturn.push({\n                market: key,\n                orderCount: failedPushObject[key].orderCount,\n                totalAmount: failedPushObject[key].totalAmount\n              }));\n              setFailedPushes(toReturn);\n              setFailedPushesError(null);\n              toReturn = [];\n              setFailedPushesIsLoaded(true);\n            } // Set the ingored orders.\n\n\n            if (ignoredOrdersArray) {\n              ignoredOrdersArray.forEach(order => {\n                if (!ignoredOrdersObject[order.Market]) ignoredOrdersObject[order.Market] = {\n                  orderCount: 1,\n                  totalAmount: order.OrderTotalAmount\n                };else {\n                  let count = ignoredOrdersObject[order.Market].orderCount;\n                  let total = ignoredOrdersObject[order.Market].totalAmount;\n                  ignoredOrdersObject[order.Market] = {\n                    orderCount: count + 1,\n                    totalAmount: total + order.OrderTotalAmount\n                  };\n                }\n              });\n              Object.keys(ignoredOrdersObject).forEach(key => toReturn.push({\n                market: key,\n                orderCount: ignoredOrdersObject[key].orderCount,\n                totalAmount: ignoredOrdersObject[key].totalAmount\n              }));\n              setIgnored(toReturn);\n              setIgnoredError(null);\n              toReturn = [];\n              setIgnoredIsLoaded(true);\n            }\n          }\n        } else if (res.name) {\n          setApiError(res.message);\n        } else if (errors) {\n          if (Array.isArray(res.errors)) {\n            res.errors.forEach(error => setApiError(`${error.message}\\n`));\n          } else console.error(res.error);\n        }\n      }, err => {\n        setApiError(err);\n        setUnpushedIsLoaded(false);\n        setFailedPushesIsLoaded(false);\n        setIgnoredIsLoaded(false);\n      });\n    }\n\n    return () => mounted = false;\n  }, []);\n  return apiError ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signin-error\",\n    children: apiError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"section-title\",\n      children: \"Staged Orders Summary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-staged\",\n      children: [/*#__PURE__*/_jsxDEV(Staged, {\n        data: unpushed,\n        error: unpushedError,\n        isLoaded: unpushedIsLoaded,\n        subheader: \"Unpushed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Staged, {\n        data: failedPushes,\n        error: failedPushesError,\n        isLoaded: failedPushesIsLoaded,\n        subheader: \"Failed Pushes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Staged, {\n        data: ignored,\n        error: ignoredError,\n        isLoaded: ignoredIsLoaded,\n        subheader: \"Ignored Pushes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StagedOrders, \"bcpNoqdvOM1NnKL7vMFL3DPf6lk=\");\n\n_c = StagedOrders;\nexport default StagedOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"StagedOrders\");","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/pages/home/staged/staged-orders.js"],"names":["React","useState","useEffect","Staged","getUnpushedOrders","StagedOrders","unpushed","setUnpushed","unpushedError","setUnpushedError","unpushedIsLoaded","setUnpushedIsLoaded","failedPushes","setFailedPushes","failedPushesError","setFailedPushesError","failedPushesIsLoaded","setFailedPushesIsLoaded","ignored","setIgnored","ignoredError","setIgnoredError","ignoredIsLoaded","setIgnoredIsLoaded","apiError","setApiError","mounted","then","res","results","data","errors","error","Error","console","unpushedArray","failedPushArray","ignoredOrdersArray","toReturn","unpushedObject","failedPushObject","ignoredOrdersObject","forEach","order","PushStatusId","push","Market","orderCount","totalAmount","OrderTotalAmount","count","total","Object","keys","key","market","name","message","Array","isArray","err"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Staged from './staged';\nimport { getUnpushedOrders } from '../../../hooks/get-order';\n\nconst StagedOrders = () => {\n  const [unpushed, setUnpushed] = useState(null);\n  const [unpushedError, setUnpushedError] = useState(null);\n  const [unpushedIsLoaded, setUnpushedIsLoaded] = useState(false);\n  const [failedPushes, setFailedPushes] = useState(null);\n  const [failedPushesError, setFailedPushesError] = useState(null);\n  const [failedPushesIsLoaded, setFailedPushesIsLoaded] = useState(false);\n  const [ignored, setIgnored] = useState(null);\n  const [ignoredError, setIgnoredError] = useState(null);\n  const [ignoredIsLoaded, setIgnoredIsLoaded] = useState(false);\n  const [apiError, setApiError] = useState(null);\n\n  // Get the unpushed orders from the DB.\n  useEffect(() => {\n    let mounted = true;\n    if (mounted) {\n      getUnpushedOrders('unpushed').then(\n        res => {          \n          const results = res?.data?.unpushed;\n          const errors = res?.errors;\n\n          if (results) {\n            const error = results[0]?.Error;\n            \n            if (error) {\n              console.error({error});\n              setApiError(error);\n            } else {\n              let unpushedArray = [], failedPushArray = [], ignoredOrdersArray = [], toReturn = [];\n              let unpushedObject = {}, failedPushObject = {}, ignoredOrdersObject = {};\n              \n              if (results) {\n                results.forEach(order => {\n                  if (null === order.PushStatusId) unpushedArray.push(order);\n                  else if (order.PushStatusId === 2) failedPushArray.push(order);\n                  else if (order.PushStatusId === 3) ignoredOrdersArray.push(order);\n                });\n              }\n              \n              // Set the unpushed orders.\n              if (unpushedArray) {\n                unpushedArray.forEach(order => {\n                  if (!unpushedObject[order.Market]) unpushedObject[order.Market] = { orderCount: 1, totalAmount: order.OrderTotalAmount };\n                  else {\n                    const count = unpushedObject[order.Market].orderCount;\n                    const total = unpushedObject[order.Market].totalAmount;\n                    unpushedObject[order.Market] = { orderCount: count + 1, totalAmount: total + order.OrderTotalAmount };\n                  }\n                });\n                Object.keys(unpushedObject).forEach(key => toReturn.push({market: key, orderCount: unpushedObject[key].orderCount, totalAmount: unpushedObject[key].totalAmount}));\n                setUnpushed(toReturn);\n                setUnpushedError(null);\n                toReturn = [];\n                setUnpushedIsLoaded(true);\n              }\n              \n              // Set the failed-push orders.\n              if (failedPushArray) {\n                failedPushArray.forEach(order => {\n                  if (!failedPushObject[order.Market]) failedPushObject[order.Market] = { orderCount: 1, totalAmount: order.OrderTotalAmount };\n                  else {\n                    let count = failedPushObject[order.Market].orderCount;\n                    let total = failedPushObject[order.Market].totalAmount;\n                    failedPushObject[order.Market] = { orderCount: count + 1, totalAmount: total + order.OrderTotalAmount };\n                  }\n                });\n                \n                Object.keys(failedPushObject).forEach(key => toReturn.push({market: key, orderCount: failedPushObject[key].orderCount, totalAmount: failedPushObject[key].totalAmount}));\n                setFailedPushes(toReturn);\n                setFailedPushesError(null);\n                toReturn = [];\n                setFailedPushesIsLoaded(true);\n              }\n              \n              // Set the ingored orders.\n              if (ignoredOrdersArray) {\n                ignoredOrdersArray.forEach(order => {\n                  if (!ignoredOrdersObject[order.Market]) ignoredOrdersObject[order.Market] = { orderCount: 1, totalAmount: order.OrderTotalAmount };\n                  else {\n                    let count = ignoredOrdersObject[order.Market].orderCount;\n                    let total = ignoredOrdersObject[order.Market].totalAmount;\n                    ignoredOrdersObject[order.Market] = { orderCount: count + 1, totalAmount: total + order.OrderTotalAmount };\n                  }\n                });\n                \n                Object.keys(ignoredOrdersObject).forEach(key => toReturn.push({market: key, orderCount: ignoredOrdersObject[key].orderCount, totalAmount: ignoredOrdersObject[key].totalAmount}));\n                setIgnored(toReturn);\n                setIgnoredError(null);\n                toReturn = [];\n                setIgnoredIsLoaded(true);\n              }\n            }\n          } else if (res.name) {\n            setApiError(res.message);\n          } else if (errors) {\n            if (Array.isArray(res.errors)) {\n              res.errors.forEach(error => setApiError(`${error.message}\\n`));\n            } else console.error(res.error);\n          }\n        },\n        err => { \n          setApiError(err);\n          setUnpushedIsLoaded(false);\n          setFailedPushesIsLoaded(false);\n          setIgnoredIsLoaded(false);\n        }\n      );\n    }\n    return () => mounted = false;\n  }, []);\n  \n  return apiError ? \n    (\n      <div className=\"signin-error\">{apiError}</div> \n    )\n    :\n    (  \n      <>\n        <h3 className='section-title'>Staged Orders Summary</h3>\n        <div className='dash-staged'>\n          <Staged data={unpushed} error={unpushedError} isLoaded={unpushedIsLoaded} subheader='Unpushed' />\n          <Staged data={failedPushes} error={failedPushesError} isLoaded={failedPushesIsLoaded} subheader='Failed Pushes' />\n          <Staged data={ignored} error={ignoredError} isLoaded={ignoredIsLoaded} subheader='Ignored Pushes' />\n        </div>\n      </>\n    )\n};\n\nexport default StagedOrders;\n"]},"metadata":{},"sourceType":"module"}