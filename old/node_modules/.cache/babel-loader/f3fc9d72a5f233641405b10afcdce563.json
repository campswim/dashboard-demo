{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useMemo } from 'react';\n\nconst useSort = (items, caller) => {\n  _s();\n\n  if (!items) items = [];\n  if (items['data'] && items['data']['failedPulls']) items = items.data.failedPulls;\n  if (items['data'] && items['data']['failedPushes']) items = items.data.failedPushes;\n  const [sortConfig, setSortConfig] = useState({\n    key: caller === 'params' || caller === 'users' ? 'Name' : caller === 'map' ? 'Id' : caller === 'unpulled' || caller === 'unpushed' || caller === 'ignored' ? 'OrderNumber' : caller === 'order-details' ? 'lineNumber' : caller === 'jobs' ? 'OrderNumber' : caller === 'jobs-summary' ? 'Count' : caller === 'staged' ? 'market' : 'missing-items' ? 'itemCode' : null,\n    direction: 'ascending'\n  });\n  const sortedData = useMemo(() => {\n    let sortedItems = items && items.length > 0 ? [...items] : [];\n    sortedItems.sort((a, b) => {\n      let elementOne = a[sortConfig.key];\n      let elementTwo = b[sortConfig.key]; // Correct for cases when the user ID is used in the ModifiedBy field, i.e., when a job modifies a parameter, not a user.\n\n      if (sortConfig.key === 'ModifiedBy') {\n        if (!elementOne && a.UserId && isNaN(a.UserId)) elementOne = a.UserId;\n        if (!elementTwo && b.UserId && isNaN(b.UserId)) elementTwo = b.UserId;\n      }\n\n      if (!isNaN(parseInt(elementOne)) && !isNaN(parseInt(elementTwo))) {\n        elementOne = parseInt(elementOne);\n        elementTwo = parseInt(elementTwo);\n      } else if ('EnabledDate' === sortConfig.key) {\n        if (elementOne && elementOne.includes('T')) elementOne = new Date(elementOne).getUTCMilliseconds();\n        if (elementTwo && elementTwo.includes('T')) elementTwo = new Date(elementTwo).getUTCMilliseconds();\n      } // Correct for null or undefined;\n\n\n      if (elementOne === null || elementOne === undefined) elementOne = '';\n      if (elementTwo === null || elementTwo === undefined) elementTwo = '';\n\n      if (typeof elementOne === 'string' && typeof elementTwo === 'string') {\n        if (elementOne.toUpperCase() < elementTwo.toUpperCase()) return sortConfig.direction === 'ascending' ? -1 : 1;else if (elementOne.toUpperCase() > elementTwo.toUpperCase()) return sortConfig.direction === 'ascending' ? 1 : -1;\n      } else {\n        if (elementOne < elementTwo) return sortConfig.direction === 'ascending' ? -1 : 1;else if (elementOne > elementTwo) return sortConfig.direction === 'ascending' ? 1 : -1;\n      }\n\n      return 0;\n    });\n    return sortedItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key, override, pause = false) => {\n    if (pause) return;\n    let direction = 'ascending';\n\n    if (!override) {\n      if (sortConfig.key === key && sortConfig.direction === 'ascending') direction = 'descending';\n    } else direction = override;\n\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n\n  return {\n    items: sortedData,\n    requestSort,\n    sortConfig\n  };\n};\n\n_s(useSort, \"EHAnus8NtxBtTleoZbRPomFVcNA=\");\n\nexport default useSort;","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/sort-data.js"],"names":["useState","useMemo","useSort","items","caller","data","failedPulls","failedPushes","sortConfig","setSortConfig","key","direction","sortedData","sortedItems","length","sort","a","b","elementOne","elementTwo","UserId","isNaN","parseInt","includes","Date","getUTCMilliseconds","undefined","toUpperCase","requestSort","override","pause"],"mappings":"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","sourcesContent":["import { useState, useMemo } from 'react';\n\nconst useSort = (items, caller) => {\n  if (!items) items = [];\n  if (items['data'] && items['data']['failedPulls']) items = items.data.failedPulls;\n  if (items['data'] && items['data']['failedPushes']) items = items.data.failedPushes;\n  \n  const [sortConfig, setSortConfig] = useState({\n    key: caller === 'params' || caller === 'users' ? 'Name' : caller === 'map' ? 'Id' : caller === 'unpulled' || caller === 'unpushed' || caller === 'ignored' ? 'OrderNumber' : caller === 'order-details' ? 'lineNumber' : caller === 'jobs' ? 'OrderNumber' : caller === 'jobs-summary' ? 'Count' : caller === 'staged' ? 'market' : 'missing-items' ? 'itemCode' : null,\n    direction: 'ascending',\n  });\n\n  const sortedData = useMemo(() => {\n    let sortedItems = items && items.length > 0 ? [...items] : [];\n\n    sortedItems.sort((a, b) => {\n      let elementOne = a[sortConfig.key];\n      let elementTwo = b[sortConfig.key];\n      \n      // Correct for cases when the user ID is used in the ModifiedBy field, i.e., when a job modifies a parameter, not a user.\n      if (sortConfig.key === 'ModifiedBy') {\n        if (!elementOne && a.UserId && isNaN(a.UserId)) elementOne = a.UserId;\n        if (!elementTwo && b.UserId && isNaN(b.UserId)) elementTwo = b.UserId;\n      }\n\n      if (!isNaN(parseInt(elementOne)) && !isNaN(parseInt(elementTwo))) {\n        elementOne = parseInt(elementOne);\n        elementTwo = parseInt(elementTwo);\n      } else if ('EnabledDate' === sortConfig.key) {\n        if (elementOne && elementOne.includes('T')) elementOne = new Date(elementOne).getUTCMilliseconds();\n        if (elementTwo && elementTwo.includes('T')) elementTwo = new Date (elementTwo).getUTCMilliseconds();\n      }\n\n      // Correct for null or undefined;\n      if (elementOne === null || elementOne === undefined) elementOne = '';\n      if (elementTwo === null || elementTwo === undefined) elementTwo = '';\n      \n      if (typeof elementOne === 'string' && typeof elementTwo === 'string') {\n        if (elementOne.toUpperCase() < elementTwo.toUpperCase())\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        else if (elementOne.toUpperCase() > elementTwo.toUpperCase())\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n      } else {\n        if (elementOne < elementTwo)\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        else if (elementOne > elementTwo)\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n      }\n      return 0;\n    });\n\n    return sortedItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key, override, pause = false) => {\n    if (pause) return;\n    let direction = 'ascending';\n    if (!override) {\n      if (sortConfig.key === key && sortConfig.direction === 'ascending') direction = 'descending';\n    } else direction = override;\n\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedData, requestSort, sortConfig };\n};\n\nexport default useSort;\n"]},"metadata":{},"sourceType":"module"}