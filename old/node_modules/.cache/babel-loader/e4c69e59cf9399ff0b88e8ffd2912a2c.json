{"ast":null,"code":"import apiCall from './api-call';\nexport default async function logChange(table, column, userId, prevValue, newValue, dataType) {\n  if (!column || !userId) return;\n  if (typeof dataType === 'number') dataType = dataType.toString();\n  const operation = 'logChange';\n  const query = `query ${operation}($table: String!, $column: String!, $userId: Int!, $prevValue: String, $newValue: String, $dataType: String!) {${operation}(table: $table, column: $column, userId: $userId, prevValue: $prevValue, newValue: $newValue, dataType: $dataType) {Id, TableName, ColumnName, PrevValue, NewValue, DataType, DateTime, Error}}`;\n  const variables = {\n    table,\n    column,\n    userId: parseInt(userId),\n    prevValue,\n    newValue,\n    dataType\n  };\n  return await apiCall(operation, query, variables).then(res => {\n    return res;\n  }, err => {\n    console.error(err);\n  });\n}","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/log-change.js"],"names":["apiCall","logChange","table","column","userId","prevValue","newValue","dataType","toString","operation","query","variables","parseInt","then","res","err","console","error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AAEA,eAAe,eAAeC,SAAf,CAAyBC,KAAzB,EAAgCC,MAAhC,EAAwCC,MAAxC,EAAgDC,SAAhD,EAA2DC,QAA3D,EAAqEC,QAArE,EAA+E;AAC5F,MAAI,CAACJ,MAAD,IAAW,CAACC,MAAhB,EAAwB;AACxB,MAAI,OAAOG,QAAP,KAAoB,QAAxB,EAAmCA,QAAQ,GAAGA,QAAQ,CAACC,QAAT,EAAX;AAEnC,QAAMC,SAAS,GAAG,WAAlB;AACA,QAAMC,KAAK,GAAI,SAAQD,SAAU,kHAAiHA,SAAU,iMAA5J;AACA,QAAME,SAAS,GAAG;AAAET,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,MAAM,EAAEQ,QAAQ,CAACR,MAAD,CAAjC;AAA2CC,IAAAA,SAA3C;AAAsDC,IAAAA,QAAtD;AAAgEC,IAAAA;AAAhE,GAAlB;AAEA,SAAO,MAAMP,OAAO,CAACS,SAAD,EAAYC,KAAZ,EAAmBC,SAAnB,CAAP,CAAqCE,IAArC,CACXC,GAAG,IAAI;AAAE,WAAOA,GAAP;AAAY,GADV,EAEXC,GAAG,IAAI;AAAEC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AAAqB,GAFnB,CAAb;AAID","sourcesContent":["import apiCall from './api-call';\n\nexport default async function logChange(table, column, userId, prevValue, newValue, dataType) {  \n  if (!column || !userId) return;\n  if (typeof dataType === 'number' ) dataType = dataType.toString();\n  \n  const operation = 'logChange';\n  const query = `query ${operation}($table: String!, $column: String!, $userId: Int!, $prevValue: String, $newValue: String, $dataType: String!) {${operation}(table: $table, column: $column, userId: $userId, prevValue: $prevValue, newValue: $newValue, dataType: $dataType) {Id, TableName, ColumnName, PrevValue, NewValue, DataType, DateTime, Error}}`;\n  const variables = { table, column, userId: parseInt(userId), prevValue, newValue, dataType };\n  \n  return await apiCall(operation, query, variables).then(\n    res => { return res },\n    err => { console.error(err); }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}