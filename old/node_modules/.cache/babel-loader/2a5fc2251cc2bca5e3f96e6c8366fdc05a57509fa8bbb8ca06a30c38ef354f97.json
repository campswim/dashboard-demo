{"ast":null,"code":"import apiCall from './api-call';\nexport default class User {\n  constructor(id = 0, email = null, name = null, role = 'User', roleId = 0, password = null) {\n    this.id = id;\n    this.email = email;\n    this.password = password;\n    this.roleId = roleId;\n  }\n  async getUserRoles() {\n    const operation = 'getUserRoles';\n    const query = `query ${operation} {${operation} {Id Role Error}}`;\n    const result = await apiCall(operation, query).then(res => {\n      return res;\n    }, err => console.error({\n      err\n    }));\n    return result;\n  }\n  async getUserRestrictions(roleId) {\n    const operation = 'getUserRestrictions';\n    const query = `query ${operation}($roleId: Int!) {${operation}(roleId: $roleId) {Id Role RestrictedPages RestrictedActions Error}}`;\n    const variables = {\n      roleId\n    };\n    const result = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => console.error(err));\n    return result;\n  }\n  async getAllUsers() {\n    const operation = 'users';\n    const query = `query ${operation} {${operation} {Id Name Email Role RoleId, DateRegistered LastLogin LoggedIn FailedAttempts Active Error}}`;\n    const result = await apiCall(operation, query).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n  async getUserById() {\n    const operation = 'userById';\n    const query = `query ${operation}($id: ID!) {${operation}(id: $id) {Id Email Name Role DateRegistered LastLogin LoggedIn FailedAttempts Error}}`;\n    const variables = {\n      id: this.id\n    };\n    const result = await apiCall(operation, query, variables).then(res => {\n      if (res) {\n        if (res.data) {\n          const r = res.data[operation];\n          this.id = r.Id;\n          this.name = r.Name;\n          this.email = r.Email;\n          this.role = r.Role;\n          this.dateRegistered = r.DateRegistered;\n          this.lastLogin = r.LastLogin;\n          this.loggedIn = r.LoggedIn;\n          this.failedAttempts = r.FAiledAttemps;\n          this.error = r.Error;\n          return res.data[operation];\n        } else if (res.name) return res.message;\n      }\n    }, err => {\n      console.error(err);\n    });\n    return result;\n  }\n  async getUserByEmail() {\n    const operation = 'userByEmail';\n    const query = `query ${operation}($email: String!) {${operation}(email: $email) {Id, LastLogin, Active}}`;\n    const variables = {\n      email: this.email\n    };\n    const result = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n  async getAllUsersSansToken() {\n    const operation = 'usersSansToken';\n    const query = `query users {users {Id Error}}`;\n    const result = await apiCall(operation, query).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n      return err;\n    });\n    return result;\n  }\n  async deleteUser(query, ids) {\n    const operation = query;\n    query = `mutation ${operation}($ids: [ID]!) {${operation}(ids: $ids) {Id}}`;\n    const variables = {\n      ids: ids\n    };\n    const results = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      return err;\n    });\n    return results;\n  }\n  async updateUser(operation, id, column, value) {\n    const query = `mutation ${operation}($id: ID!, $column: String!, $newValue: String!) {${operation}(id: $id, column: $column, newValue: $newValue) {${column} Error}}`;\n    const variables = {\n      id: id,\n      column: column,\n      newValue: value\n    };\n    return await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      return err;\n    });\n  }\n  async signIn() {\n    const operation = 'signin';\n    const query = `mutation ${operation}($id: ID!, $password: String!) {${operation}(id: $id, password: $password) {Id Name Role RoleId LastLogin Error}}`;\n    const variables = {\n      id: this.id,\n      password: this.password\n    };\n    const result = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n  async signUp() {\n    const operation = 'signup';\n    const query = `mutation ${operation}($email: String!, $usersName: String!, $password: String!, $role: Int!) {${operation}(email: $email, usersName: $usersName, password: $password, role: $role) {Id Message Error}}`;\n    const variables = {\n      email: this.email,\n      usersName: this.name,\n      password: this.password,\n      role: this.role\n    };\n    const result = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n  async signOut() {\n    const operation = 'signout';\n    const mutation = `mutation ${operation} {${operation} {Id, Name, Error}}`;\n    const result = await apiCall(operation, mutation).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n  async changePassword(firstSignin) {\n    const operation = 'changePassword';\n    const mutation = `mutation ${operation}($id: ID!, $password: String!, $firstSignin: Boolean!) {${operation}(id: $id, password: $password, firstSignin: $firstSignin) {Id Name Role RoleId LastLogin Error}}`;\n    const variables = {\n      id: this.id,\n      password: this.password,\n      firstSignin\n    };\n    const result = await apiCall(operation, mutation, variables).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n}","map":{"version":3,"names":["apiCall","User","constructor","id","email","name","role","roleId","password","getUserRoles","operation","query","result","then","res","err","console","error","getUserRestrictions","variables","getAllUsers","getUserById","data","r","Id","Name","Email","Role","dateRegistered","DateRegistered","lastLogin","LastLogin","loggedIn","LoggedIn","failedAttempts","FAiledAttemps","Error","message","getUserByEmail","getAllUsersSansToken","deleteUser","ids","results","updateUser","column","value","newValue","signIn","signUp","usersName","signOut","mutation","changePassword","firstSignin"],"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/get-user.js"],"sourcesContent":["import apiCall from './api-call';\n\nexport default class User {\n  id;\n  email;\n  password;\n  name;\n  role;\n  roleId;\n  dateRegistered;\n  lastLogin;\n  loggedIn;\n  failedAttempts;\n  error;\n\n  constructor(id = 0, email = null, name = null, role = 'User', roleId = 0, password = null) {\n    this.id = id;\n    this.email = email;\n    this.password = password;\n    this.roleId = roleId;\n  };\n\n  async getUserRoles() {\n    const operation = 'getUserRoles';\n    const query = `query ${operation} {${operation} {Id Role Error}}`;\n    const result = await apiCall(operation, query).then(\n      res => { return res; },\n      err => console.error({err})\n    );\n\n    return result;\n  };\n\n  async getUserRestrictions(roleId) {\n    const operation = 'getUserRestrictions';\n    const query = `query ${operation}($roleId: Int!) {${operation}(roleId: $roleId) {Id Role RestrictedPages RestrictedActions Error}}`;\n    const variables = { roleId };\n    const result = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => console.error(err)\n    );\n\n    return result;\n  };\n\n  async getAllUsers() {\n    const operation = 'users';\n    const query = `query ${operation} {${operation} {Id Name Email Role RoleId, DateRegistered LastLogin LoggedIn FailedAttempts Active Error}}`;\n    const result = await apiCall(operation, query).then(\n      res => { return res; },\n      err => { console.error({err}) }\n    );\n\n    return result;\n  };\n\n  async getUserById() {\n    const operation = 'userById';\n    const query = `query ${operation}($id: ID!) {${operation}(id: $id) {Id Email Name Role DateRegistered LastLogin LoggedIn FailedAttempts Error}}`;\n    const variables = { id: this.id }\n\n    const result = await apiCall(operation, query, variables).then(\n      res => {\n        if (res) {\n          if (res.data) {\n            const r = res.data[operation];\n            this.id = r.Id;\n            this.name = r.Name;\n            this.email = r.Email;\n            this.role = r.Role;\n            this.dateRegistered = r.DateRegistered;\n            this.lastLogin = r.LastLogin;\n            this.loggedIn = r.LoggedIn;\n            this.failedAttempts = r.FAiledAttemps;\n            this.error = r.Error;\n            return res.data[operation];\n          }\n          else if (res.name) return res.message;\n        }\n      },\n      err => { console.error(err)}\n    );\n\n    return result;\n  };\n\n  async getUserByEmail() {\n    const operation = 'userByEmail';\n    const query = `query ${operation}($email: String!) {${operation}(email: $email) {Id, LastLogin, Active}}`;\n    const variables = { email: this.email };\n    const result = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { console.error({err}); }\n    );\n\n    return result;\n  };\n\n  async getAllUsersSansToken() {\n    const operation = 'usersSansToken';\n    const query = `query users {users {Id Error}}`;\n    const result = await apiCall(operation, query).then(\n      res => { return res; },\n      err => { \n        console.error({err}); \n        return err;\n      }\n    );\n    \n    return result;\n  };\n\n  async deleteUser(query, ids) {\n    const operation = query;\n    query = `mutation ${operation}($ids: [ID]!) {${operation}(ids: $ids) {Id}}`;\n    const variables = { ids: ids };\n    const results = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { return err; }\n    );\n\n    return results;\n  };\n\n  async updateUser(operation, id, column, value) {\n    const query = `mutation ${operation}($id: ID!, $column: String!, $newValue: String!) {${operation}(id: $id, column: $column, newValue: $newValue) {${column} Error}}`;\n    const variables = {\n      id: id,\n      column: column,\n      newValue: value\n    };\n    \n    return await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { return err; }\n    );\n  }\n\n  async signIn() {\n    const operation = 'signin';\n    const query = `mutation ${operation}($id: ID!, $password: String!) {${operation}(id: $id, password: $password) {Id Name Role RoleId LastLogin Error}}`;\n    const variables = { id: this.id, password: this.password };    \n    const result = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { console.error({err}) }\n    );\n    return result;\n  };\n\n  async signUp() {\n    const operation = 'signup';\n    const query = `mutation ${operation}($email: String!, $usersName: String!, $password: String!, $role: Int!) {${operation}(email: $email, usersName: $usersName, password: $password, role: $role) {Id Message Error}}`;\n    const variables = { email: this.email, usersName: this.name, password: this.password, role: this.role };\n    const result = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { console.error({err}); }\n    );\n\n    return result;\n  };\n\n  async signOut() {\n    const operation = 'signout';\n    const mutation = `mutation ${operation} {${operation} {Id, Name, Error}}`;\n    const result = await apiCall(operation, mutation).then(\n      res => { return res },\n      err => { console.error({err}); }\n    );\n\n    return result;\n  };\n\n  async changePassword(firstSignin) {\n    const operation = 'changePassword';\n    const mutation = `mutation ${operation}($id: ID!, $password: String!, $firstSignin: Boolean!) {${operation}(id: $id, password: $password, firstSignin: $firstSignin) {Id Name Role RoleId LastLogin Error}}`;\n    const variables = { id: this.id, password: this.password, firstSignin };\n    const result = await apiCall(operation, mutation, variables).then(\n      res => { return res },\n      err => { console.error({err}); }\n    );\n    \n    return result;\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}