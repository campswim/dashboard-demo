{"ast":null,"code":"var _jsxFileName = \"/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/pages/home/failed-processes/failed-jobs.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport useSort from '../../../hooks/sort-data';\nimport formatHeaders from '../../../hooks/format-headers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FailedJobs = props => {\n  _s();\n\n  // Get the table's headers from the data's keys.\n  const headers = props.data && JSON.stringify(props.data) !== '{}' ? formatHeaders(Object.keys(Object.values(props.data)[0])) : []; // The following two constants handle the sorting algorithm.\n\n  const {\n    items,\n    requestSort,\n    sortConfig\n  } = useSort(props.data && JSON.stringify(props.data) !== '{}' ? Object.values(props.data) : [], 'jobs-summary');\n\n  const getClassNamesFor = name => {\n    if (!sortConfig) return;\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n\n  return props.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signin-error\",\n    children: props.error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this) : !props.isLoaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading . . . \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-failed-processes desktop\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"unprocessed-jobs-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"header-row\",\n            children: headers ? headers.map((header, key) => /*#__PURE__*/_jsxDEV(\"th\", {\n              onClick: () => requestSort(header.split(' ').join('')),\n              className: getClassNamesFor(header.split(' ').join('')),\n              children: header\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 19\n            }, this)) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: items.length > 0 ? items.map((item, key) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: {\n                  pathname: '/failed-processes',\n                  state: {\n                    job: item.Name\n                  }\n                },\n                children: item.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Count\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Direction\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.ExternalSystem\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Categories\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"None\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-failed-processes mobile\",\n      children: items.length > 0 ? items.map((item, i) => /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headers ? headers.map((header, j) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: header\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 23\n            }, this), header !== 'Name' ? /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item[header.split(' ').join('')]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 25\n            }, this) : /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"jobs-link\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: {\n                  pathname: '/failed-processes',\n                  state: {\n                    job: item.Name\n                  }\n                },\n                children: item.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 25\n            }, this)]\n          }, j, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FailedJobs, \"QPHcTATq20H/OpQ1sh37sgXRvZQ=\", false, function () {\n  return [useSort];\n});\n\n_c = FailedJobs;\nexport default FailedJobs;\n\nvar _c;\n\n$RefreshReg$(_c, \"FailedJobs\");","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/pages/home/failed-processes/failed-jobs.js"],"names":["React","Link","useSort","formatHeaders","FailedJobs","props","headers","data","JSON","stringify","Object","keys","values","items","requestSort","sortConfig","getClassNamesFor","name","key","direction","undefined","error","isLoaded","map","header","split","join","length","item","pathname","state","job","Name","Count","Direction","ExternalSystem","Categories","i","j"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport useSort from '../../../hooks/sort-data';\nimport formatHeaders from '../../../hooks/format-headers';\n\nconst FailedJobs = props => {\n  // Get the table's headers from the data's keys.\n  const headers = props.data && JSON.stringify(props.data) !== '{}' ? formatHeaders(Object.keys(Object.values(props.data)[0])) : [];\n  // The following two constants handle the sorting algorithm.\n  const { items, requestSort, sortConfig } = useSort(props.data && JSON.stringify(props.data) !== '{}' ? Object.values(props.data) : [], 'jobs-summary');\n  const getClassNamesFor = name => {\n    if (!sortConfig) return;\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n  \n  return props.error ? \n  (\n    <div className=\"signin-error\">{props.error}</div>\n  )\n  : !props.isLoaded ?\n  (\n    <div className=\"loading\">Loading . . . </div>\n  )\n  :\n  (\n    <>\n      <div className=\"dash-failed-processes desktop\">\n        <table className=\"unprocessed-jobs-table\">\n          <thead>\n            <tr className=\"header-row\">\n\n              {headers ? \n              (\n                headers.map((header, key) => (\n                  <th\n                    key={key}\n                    onClick={() => requestSort(header.split(' ').join(''))}\n                    className={getClassNamesFor(header.split(' ').join(''))}\n                  >\n                    {header}\n                  </th>\n                ))\n              )\n              :\n              (\n                null\n              )}\n            </tr>\n          </thead>\n          <tbody>\n            {items.length > 0 ?\n            (\n              items.map((item, key) => (\n                <tr key={key}>\n                  <td>\n                    <Link\n                      to={{\n                        pathname: '/failed-processes',\n                        state: { job: item.Name },\n                      }}\n                    >\n                      {item.Name}\n                    </Link>\n                  </td>\n                  <td>{item.Count}</td>\n                  <td>{item.Direction}</td>\n                  <td>{item.ExternalSystem}</td>\n                  <td>{item.Categories}</td>\n                </tr>\n              )) \n            )\n            :\n            (\n              <tr><td>None</td></tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      { /* Display the table vertically for mobile. */ }\n      <div className=\"dash-failed-processes mobile\">\n        {items.length > 0 ? \n        (\n          items.map((item, i) => (\n            <table key={i}>\n              <thead>\n                {headers ?\n                (\n                  headers.map((header, j) => (\n                    <tr key={j}>\n                      <th >{header}</th>\n                        {header !== 'Name' ? \n                      (\n                        <td>\n                          {item[header.split(' ').join('')]}\n                        </td>\n                      )\n                      :\n                      (\n                        <td className='jobs-link'>\n                          <Link\n                            to={{\n                              pathname: '/failed-processes',\n                              state: { \n                                job: item.Name,\n                              },\n                            }}\n                          >\n                            {item.Name}\n                          </Link>\n                        </td>\n                      )}\n                    </tr>\n                  ))\n                )\n                :\n                (\n                  null\n                )}\n              </thead>\n            </table>\n          ))\n        )\n        :\n        (\n          null\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default FailedJobs;\n"]},"metadata":{},"sourceType":"module"}