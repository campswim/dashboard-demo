{"ast":null,"code":"import apiCall from './api-call';\nexport default class User {\n  constructor(id = 0, email = null, name = null, role = 'User', roleId = 0, password = null) {\n    this.id = id;\n    this.email = email;\n    this.password = password;\n    this.roleId = roleId;\n  }\n\n  async getUserRoles() {\n    const operation = 'getUserRoles';\n    const query = `query ${operation} {${operation} {Id Role Error}}`;\n    const result = await apiCall(operation, query).then(res => {\n      return res;\n    }, err => console.error({\n      err\n    }));\n    return result;\n  }\n\n  async getUserRestrictions(roleId) {\n    const operation = 'getUserRestrictions';\n    const query = `query ${operation}($roleId: Int!) {${operation}(roleId: $roleId) {Id Role RestrictedPages RestrictedActions Error}}`;\n    const variables = {\n      roleId\n    };\n    const result = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => console.error(err));\n    return result;\n  }\n\n  async getAllUsers() {\n    const operation = 'users';\n    const query = `query ${operation} {${operation} {Id Name Email Role RoleId, DateRegistered LastLogin LoggedIn FailedAttempts Active Error}}`;\n    const result = await apiCall(operation, query).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n\n  async getUserById() {\n    const operation = 'userById';\n    const query = `query ${operation}($id: ID!) {${operation}(id: $id) {Id Email Name Role DateRegistered LastLogin LoggedIn FailedAttempts Error}}`;\n    const variables = {\n      id: this.id\n    };\n    const result = await apiCall(operation, query, variables).then(res => {\n      if (res) {\n        if (res.data) {\n          const r = res.data[operation];\n          this.id = r.Id;\n          this.name = r.Name;\n          this.email = r.Email;\n          this.role = r.Role;\n          this.dateRegistered = r.DateRegistered;\n          this.lastLogin = r.LastLogin;\n          this.loggedIn = r.LoggedIn;\n          this.failedAttempts = r.FAiledAttemps;\n          this.error = r.Error;\n          return res.data[operation];\n        } else if (res.name) return res.message;\n      }\n    }, err => {\n      console.error(err);\n    });\n    return result;\n  }\n\n  async getUserByEmail() {\n    const operation = 'userByEmail';\n    const query = `query ${operation}($email: String!) {${operation}(email: $email) {Id, LastLogin, Active}}`;\n    const variables = {\n      email: this.email\n    };\n    const result = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n\n  async getAllUsersSansToken() {\n    const operation = 'usersSansToken';\n    const query = `query users {users {Id Error}}`;\n    const result = await apiCall(operation, query).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n\n  async deleteUser(query, ids) {\n    const operation = query;\n    query = `mutation ${operation}($ids: [ID]!) {${operation}(ids: $ids) {Id}}`;\n    const variables = {\n      ids: ids\n    };\n    const results = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      return err;\n    });\n    return results;\n  }\n\n  async updateUser(operation, id, column, value) {\n    const query = `mutation ${operation}($id: ID!, $column: String!, $newValue: String!) {${operation}(id: $id, column: $column, newValue: $newValue) {${column} Error}}`;\n    const variables = {\n      id: id,\n      column: column,\n      newValue: value\n    };\n    return await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      return err;\n    });\n  }\n\n  async signIn() {\n    const operation = 'signin';\n    const query = `mutation ${operation}($id: ID!, $password: String!) {${operation}(id: $id, password: $password) {Id Name Role RoleId LastLogin Error}}`;\n    const variables = {\n      id: this.id,\n      password: this.password\n    };\n    console.log({\n      operation,\n      query,\n      variables\n    });\n    const result = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n\n  async signUp() {\n    const operation = 'signup';\n    const query = `mutation ${operation}($email: String!, $usersName: String!, $password: String!, $role: Int!) {${operation}(email: $email, usersName: $usersName, password: $password, role: $role) {Id Message Error}}`;\n    const variables = {\n      email: this.email,\n      usersName: this.name,\n      password: this.password,\n      role: this.role\n    };\n    const result = await apiCall(operation, query, variables).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n\n  async signOut() {\n    const operation = 'signout';\n    const mutation = `mutation ${operation} {${operation} {Id, Name, Error}}`;\n    const result = await apiCall(operation, mutation).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n\n  async changePassword(firstSignin) {\n    const operation = 'changePassword';\n    const mutation = `mutation ${operation}($id: ID!, $password: String!, $firstSignin: Boolean!) {${operation}(id: $id, password: $password, firstSignin: $firstSignin) {Id Name Role RoleId LastLogin Error}}`;\n    const variables = {\n      id: this.id,\n      password: this.password,\n      firstSignin\n    };\n    const result = await apiCall(operation, mutation, variables).then(res => {\n      return res;\n    }, err => {\n      console.error({\n        err\n      });\n    });\n    return result;\n  }\n\n}","map":{"version":3,"sources":["/Users/rhead/Coding/campswim/dashboard/dashboard-ncompass/src/hooks/get-user.js"],"names":["apiCall","User","constructor","id","email","name","role","roleId","password","getUserRoles","operation","query","result","then","res","err","console","error","getUserRestrictions","variables","getAllUsers","getUserById","data","r","Id","Name","Email","Role","dateRegistered","DateRegistered","lastLogin","LastLogin","loggedIn","LoggedIn","failedAttempts","FAiledAttemps","Error","message","getUserByEmail","getAllUsersSansToken","deleteUser","ids","results","updateUser","column","value","newValue","signIn","log","signUp","usersName","signOut","mutation","changePassword","firstSignin"],"mappings":"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","sourcesContent":["import apiCall from './api-call';\n\nexport default class User {\n  id;\n  email;\n  password;\n  name;\n  role;\n  roleId;\n  dateRegistered;\n  lastLogin;\n  loggedIn;\n  failedAttempts;\n  error;\n\n  constructor(id = 0, email = null, name = null, role = 'User', roleId = 0, password = null) {\n    this.id = id;\n    this.email = email;\n    this.password = password;\n    this.roleId = roleId;\n  };\n\n  async getUserRoles() {\n    const operation = 'getUserRoles';\n    const query = `query ${operation} {${operation} {Id Role Error}}`;\n    const result = await apiCall(operation, query).then(\n      res => { return res; },\n      err => console.error({err})\n    );\n\n    return result;\n  };\n\n  async getUserRestrictions(roleId) {\n    const operation = 'getUserRestrictions';\n    const query = `query ${operation}($roleId: Int!) {${operation}(roleId: $roleId) {Id Role RestrictedPages RestrictedActions Error}}`;\n    const variables = { roleId };\n    const result = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => console.error(err)\n    );\n\n    return result;\n  };\n\n  async getAllUsers() {\n    const operation = 'users';\n    const query = `query ${operation} {${operation} {Id Name Email Role RoleId, DateRegistered LastLogin LoggedIn FailedAttempts Active Error}}`;\n    const result = await apiCall(operation, query).then(\n      res => { return res; },\n      err => { console.error({err}) }\n    );\n\n    return result;\n  };\n\n  async getUserById() {\n    const operation = 'userById';\n    const query = `query ${operation}($id: ID!) {${operation}(id: $id) {Id Email Name Role DateRegistered LastLogin LoggedIn FailedAttempts Error}}`;\n    const variables = { id: this.id }\n\n    const result = await apiCall(operation, query, variables).then(\n      res => {\n        if (res) {\n          if (res.data) {\n            const r = res.data[operation];\n            this.id = r.Id;\n            this.name = r.Name;\n            this.email = r.Email;\n            this.role = r.Role;\n            this.dateRegistered = r.DateRegistered;\n            this.lastLogin = r.LastLogin;\n            this.loggedIn = r.LoggedIn;\n            this.failedAttempts = r.FAiledAttemps;\n            this.error = r.Error;\n            return res.data[operation];\n          }\n          else if (res.name) return res.message;\n        }\n      },\n      err => { console.error(err)}\n    );\n\n    return result;\n  };\n\n  async getUserByEmail() {\n    const operation = 'userByEmail';\n    const query = `query ${operation}($email: String!) {${operation}(email: $email) {Id, LastLogin, Active}}`;\n    const variables = { email: this.email };\n    const result = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { console.error({err}); }\n    );\n\n    return result;\n  };\n\n  async getAllUsersSansToken() {\n    const operation = 'usersSansToken';\n    const query = `query users {users {Id Error}}`;\n    const result = await apiCall(operation, query).then(\n      res => { return res; },\n      err => { console.error({err}); }\n    );\n    \n    return result;\n  };\n\n  async deleteUser(query, ids) {\n    const operation = query;\n    query = `mutation ${operation}($ids: [ID]!) {${operation}(ids: $ids) {Id}}`;\n    const variables = { ids: ids };\n    const results = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { return err; }\n    );\n\n    return results;\n  };\n\n  async updateUser(operation, id, column, value) {\n    const query = `mutation ${operation}($id: ID!, $column: String!, $newValue: String!) {${operation}(id: $id, column: $column, newValue: $newValue) {${column} Error}}`;\n    const variables = {\n      id: id,\n      column: column,\n      newValue: value\n    };\n    \n    return await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { return err; }\n    );\n  }\n\n  async signIn() {\n    const operation = 'signin';\n    const query = `mutation ${operation}($id: ID!, $password: String!) {${operation}(id: $id, password: $password) {Id Name Role RoleId LastLogin Error}}`;\n    const variables = { id: this.id, password: this.password };\n    \n    console.log({operation, query, variables});\n    \n    const result = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { console.error({err}) }\n    );\n    return result;\n  };\n\n  async signUp() {\n    const operation = 'signup';\n    const query = `mutation ${operation}($email: String!, $usersName: String!, $password: String!, $role: Int!) {${operation}(email: $email, usersName: $usersName, password: $password, role: $role) {Id Message Error}}`;\n    const variables = { email: this.email, usersName: this.name, password: this.password, role: this.role };\n    const result = await apiCall(operation, query, variables).then(\n      res => { return res; },\n      err => { console.error({err}); }\n    );\n\n    return result;\n  };\n\n  async signOut() {\n    const operation = 'signout';\n    const mutation = `mutation ${operation} {${operation} {Id, Name, Error}}`;\n    const result = await apiCall(operation, mutation).then(\n      res => { return res },\n      err => { console.error({err}); }\n    );\n\n    return result;\n  };\n\n  async changePassword(firstSignin) {\n    const operation = 'changePassword';\n    const mutation = `mutation ${operation}($id: ID!, $password: String!, $firstSignin: Boolean!) {${operation}(id: $id, password: $password, firstSignin: $firstSignin) {Id Name Role RoleId LastLogin Error}}`;\n    const variables = { id: this.id, password: this.password, firstSignin };\n    const result = await apiCall(operation, mutation, variables).then(\n      res => { return res },\n      err => { console.error({err}); }\n    );\n    \n    return result;\n  };\n}"]},"metadata":{},"sourceType":"module"}